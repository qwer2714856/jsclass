/**
 * BAAS SDK v0.0.8
 */

/**
 * BAAS主模块
 * @module BAAS
 * @author Nie
 */
(function (root) {
    'use strict';

    // BAAS主对象
    var BAAS = root.BAAS = root.BAAS || {};

    // BAAS版本号
    BAAS._VERSION = '0.0.8';

    // 数据类型检查
    BAAS._isType = function (val) {
        return Object.prototype.toString.call(val).slice(8, -1);
    };
    // 是否为字符串
    BAAS._isString = function (val) {
        return BAAS._isType(val) === 'String';
    };
    // 是否为数字
    BAAS._isNumber = function (val) {
        return BAAS._isType(val) === 'Number';
    };
    // 是否为布尔值
    BAAS._isBoolean = function (val) {
        return BAAS._isType(val) === 'Boolean';
    };
    // 是否为Undefined
    BAAS._isUndefined = function (val) {
        return BAAS._isType(val) === 'Undefined';
    };
    // 是否为Null
    BAAS._isNull = function (val) {
        return BAAS._isType(val) === 'Null';
    };
    // 是否为对象
    BAAS._isObject = function (val) {
        return BAAS._isType(val) === 'Object';
    };
    // 是否为数组
    BAAS._isArray = function (val) {
        return BAAS._isType(val) === 'Array';
    };
    // 是否为函数
    BAAS._isFunction = function (val) {
        return BAAS._isType(val) === 'Function';
    };
    // 是否为Null或Undefined
    BAAS._isNullOrUndefined = function (val) {
        return BAAS._isNull(val) || BAAS._isUndefined(val);
    };
    // 是否为空
    BAAS._isEmpty = function (val) {
        if (BAAS._isObject(val)) {
            for (var key in val) {
                if (val.hasOwnProperty(key)) {
                    return false;
                }
            }
            return true;
        } else if (BAAS._isArray(val)) {
            return val.length === 0;
        } else {
            return !val;
        }
    };

    // 对象扩展
    BAAS._extend = function (dest, src) {
        if (BAAS._isObject(dest) || BAAS._isFunction(dest) && BAAS._isObject(src)) {
            for (var key in src) {
                if (src.hasOwnProperty(key)) {
                    if (BAAS._isObject(src[key])) {
                        dest[key] = BAAS._extend({}, src[key]);
                    } else if (BAAS._isArray(src[key])) {
                        dest[key] = BAAS._extend([], src[key]);
                    } else {
                        dest[key] = src[key];
                    }
                }
            }
        } else if (BAAS._isArray(dest) && BAAS._isArray(src)) {
            for (var i = 0, len = src.length; i < len; i++) {
                dest.push(src[i]);
            }
        }
        return dest;
    };
    // 对象复制
    BAAS._clone = function (src) {
        if (BAAS._isObject(src)) {
            return BAAS._extend({}, src);
        } else if (BAAS._isArray(src)) {
            return BAAS._extend([], src);
        } else {
            return src;
        }
    };

    // JSON引用
    BAAS._JSON = root.JSON || null;
    // 序列化JSON对象
    BAAS._toJSON = function (obj) {
        if (BAAS._JSON) {
            return BAAS._JSON.stringify(obj);
        } else {
            throw new Error('您的浏览器不支持JSON！');
        }
    };
    // 反序列化JSON字符串
    BAAS._fromJSON = function (str) {
        if (BAAS._JSON) {
            return BAAS._JSON.parse(str);
        } else {
            throw new Error('您的浏览器不支持JSON！');
        }
    };

    // sessionStorage引用
    BAAS._Storage = root.sessionStorage || null;
    // 添加sessionStorage条目
    BAAS._setItem = function (key, value) {
        if (BAAS._Storage) {
            BAAS._Storage.setItem(key || '', value ? BAAS._toJSON(value) : '');
        } else {
            throw new Error('您的浏览器不支持sessionStorage！');
        }
    };
    // 移除sessionStorage条目
    BAAS._removeItem = function (key) {
        if (BAAS._Storage) {
            BAAS._Storage.removeItem(key || '');
        } else {
            throw new Error('您的浏览器不支持sessionStorage！');
        }
    };
    // 获取sessionStorage条目
    BAAS._getItem = function (key) {
        if (BAAS._Storage) {
            return BAAS._fromJSON(BAAS._Storage.getItem(key || ''));
        } else {
            throw new Error('您的浏览器不支持sessionStorage！');
        }
    };
    // 获取cookie
    BAAS._getCookie = function (c_name) {
        if (document.cookie.length > 0) {
            var c_start = document.cookie.indexOf(c_name + "=");
            if (c_start != -1) {
                c_start = c_start + c_name.length + 1;
                var c_end = document.cookie.indexOf(";", c_start);
                if (c_end == -1) c_end = document.cookie.length;
                return unescape(document.cookie.substring(c_start, c_end));
            }
        }
    };

    // encodeURIComponent引用
    BAAS._encodeURIComponent = root.encodeURIComponent || null;
    // decodeURIComponent引用
    BAAS._decodeURIComponent = root.decodeURIComponent || null;
    // 查询参数格式化
    BAAS._getQuery = function (obj) {
        var query = '';
        for (var key in obj) {
            if (obj.hasOwnProperty(key)) {
                var value = obj[key], child = {};
                if (BAAS._isObject(value)) {
                    for (var item in value) {
                        if (value.hasOwnProperty(item)) {
                            child = {};
                            child[key + '[' + item + ']'] = value[item];
                            query += BAAS._getQuery(child) + '&';
                        }
                    }
                } else if (BAAS._isArray(value)) {
                    for (var i = 0, len = value.length; i < len; i++) {
                        child = {};
                        child[key + '[' + i + ']'] = value[i];
                        query += BAAS._getQuery(child) + '&';
                    }
                } else if (!BAAS._isNullOrUndefined(value)) {
                    if (BAAS._encodeURIComponent) {
                        query += BAAS._encodeURIComponent(key) + '=' + BAAS._encodeURIComponent(value) + '&';
                    } else {
                        throw new Error('您的浏览器不支持encodeURIComponent');
                    }
                }
            }
        }
        return query.length ? '&' + query.slice(0, -1) : query;
    };
    // 获取一个随机值（前缀+时间+随机数）
    BAAS._getToken = function (str) {
        str = str || '';
        var current = new root.Date();
        var year = current.getFullYear();
        year = ('0000' + year).substr(-4);
        var month = current.getMonth() + 1;
        month = ('00' + month).substr(-2);
        var date = current.getDate();
        date = ('00' + date).substr(-2);
        var hour = current.getHours();
        hour = ('00' + hour).substr(-2);
        var minute = current.getMinutes();
        minute = ('00' + minute).substr(-2);
        var second = current.getSeconds();
        second = ('00' + second).substr(-2);
        var millisecond = current.getMilliseconds();
        millisecond = ('000' + millisecond).substr(-3);
        var random = function (num) {
            num = +num || 4;
            var str = '';
            for (var i = 0; i < num; i++) {
                str += root.parseInt(root.Math.random() * 10);
            }
            return str;
        };
        return str + year + month + date + hour + minute + second + millisecond + random();
    };

    // Promise类
    BAAS._Promise = function () {
        this._resolved = false;
        this._rejected = false;
        this._resolvedCallbacks = [];
        this._rejectedCallbacks = [];
        this._result = null;
        this._error = null;
    };
    BAAS._extend(BAAS._Promise, {
        // 是否为Promise实例
        _is: function (val) {
            return BAAS._isObject(val) && BAAS._isFunction(val.then)
                && BAAS._isFunction(val._resolve) && BAAS._isFunction(val._reject);
        }
    });
    BAAS._extend(BAAS._Promise.prototype, {
        // resolve方法
        _resolve: function () {
            this._resolved = true;
            this._result = arguments;
            for (var i = 0, len = this._resolvedCallbacks.length; i < len; i++) {
                this._resolvedCallbacks[i].apply(this, this._result);
            }
            this._resolvedCallbacks = [];
            this._rejectedCallbacks = [];
        },
        // reject方法
        _reject: function () {
            this._rejected = true;
            this._error = arguments;
            for (var i = 0, len = this._rejectedCallbacks.length; i < len; i++) {
                this._rejectedCallbacks[i].apply(this, this._error);
            }
            this._resolvedCallbacks = [];
            this._rejectedCallbacks = [];
        },

        // then方法
        then: function (resolvedCallback, rejectedCallback) {
            var promise = new BAAS._Promise();

            var wrappedResolvedCallback = function () {
                var result = arguments;
                if (resolvedCallback) {
                    result = [resolvedCallback.apply(this, result)];
                }
                if (result.length === 1 && BAAS._Promise._is(result[0])) {
                    result[0].then(function () {
                        promise._resolve.apply(promise, arguments);
                    }, function () {
                        promise._reject.apply(promise, arguments);
                    });
                } else {
                    promise._resolve.apply(promise, result);
                }
            };

            var wrappedRejectedCallback = function () {
                var error = arguments;
                if (rejectedCallback) {
                    error = [rejectedCallback.apply(this, error)];
                }
                if (error.length === 1 && BAAS._Promise._is(error[0])) {
                    error[0].then(function () {
                        promise._resolve.apply(promise, arguments);
                    }, function () {
                        promise._reject.apply(promise, arguments);
                    });
                } else {
                    promise._reject.apply(promise, error);
                }
            };

            if (this._resolved) {
                wrappedResolvedCallback.apply(this, this._result);
            } else if (this._rejected) {
                wrappedRejectedCallback.apply(this, this._error);
            } else {
                this._resolvedCallbacks.push(wrappedResolvedCallback);
                this._rejectedCallbacks.push(wrappedRejectedCallback);
            }

            return promise;
        },
        // success方法
        success: function (resolvedCallback) {
            var rejectedCallback = null;

            var promise = new BAAS._Promise();

            var wrappedResolvedCallback = function () {
                var result = arguments;
                if (resolvedCallback) {
                    resolvedCallback.apply(this, result);
                }
                promise._resolve.apply(promise, result);
            };

            var wrappedRejectedCallback = function () {
                var error = arguments;
                if (rejectedCallback) {
                    rejectedCallback.apply(this, error);
                }
                promise._reject.apply(promise, error);
            };

            if (this._resolved) {
                wrappedResolvedCallback.apply(this, this._result);
            } else if (this._rejected) {
                wrappedRejectedCallback.apply(this, this._error);
            } else {
                this._resolvedCallbacks.push(wrappedResolvedCallback);
                this._rejectedCallbacks.push(wrappedRejectedCallback);
            }

            return promise;
        },
        // error方法
        error: function (rejectedCallback) {
            var resolvedCallback = null;

            var promise = new BAAS._Promise();

            var wrappedResolvedCallback = function () {
                var result = arguments;
                if (resolvedCallback) {
                    resolvedCallback.apply(this, result);
                }
                promise._resolve.apply(promise, result);
            };

            var wrappedRejectedCallback = function () {
                var error = arguments;
                if (rejectedCallback) {
                    rejectedCallback.apply(this, error);
                }
                promise._reject.apply(promise, error);
            };

            if (this._resolved) {
                wrappedResolvedCallback.apply(this, this._result);
            } else if (this._rejected) {
                wrappedRejectedCallback.apply(this, this._error);
            } else {
                this._resolvedCallbacks.push(wrappedResolvedCallback);
                this._rejectedCallbacks.push(wrappedRejectedCallback);
            }

            return promise;
        }
    });

    // XMLHttpRequest引用
    BAAS._XMLHttpRequest = root.XMLHttpRequest || null;
    // XDomainRequest引用
    BAAS._XDomainRequest = root.XDomainRequest || null;
    // AJAX封装
    BAAS._ajax = function (opt) {
        var method = typeof opt.method === 'string' ? opt.method : '';
        var url = typeof opt.url === 'string' ? opt.url : '';
        var data = typeof opt.data === 'string' ? opt.data : '';
        var file = typeof opt.file === 'object' ? opt.file : null;

        var promise = new BAAS._Promise();

        if (BAAS._XMLHttpRequest) {
            var xhr = new BAAS._XMLHttpRequest();
            xhr.onreadystatechange = function () {
                if (xhr.readyState === 4) {
                    if (xhr.status >= 200 && xhr.status < 300) {
                        var response = '';
                        try {
                            response = BAAS._fromJSON(xhr.responseText);
                        } catch (err) {
                            promise._reject(err.message, xhr.status, xhr);
                        }
                        if (response) {
                            promise._resolve(response, xhr.status, xhr);
                        }
                    } else {
                        promise._reject(xhr.statusText, xhr.status, xhr);
                    }
                }
            };
            xhr.ontimeout = function () {
                promise._reject(xhr.statusText, xhr.status, xhr);
            };
            xhr.open(method, url, true);
            xhr.withCredentials = true;
            if (file) {
                xhr.send(file);
            } else {
                xhr.setRequestHeader('Content-Type', 'text/plain');
                xhr.send(data);
            }
        } else if (BAAS._XDomainRequest) {
            var xdr = new BAAS._XDomainRequest();
            xdr.onload = function () {
                var response = '';
                try {
                    response = BAAS._fromJSON(xdr.responseText);
                } catch (err) {
                    promise._reject(err.message, 400, xdr);
                }
                if (response) {
                    promise._resolve(response, 200, xdr);
                }
            };
            xdr.onerror = function () {
                promise._reject('Bad Request', 400, xdr);
            };
            xdr.ontimeout = function () {
                promise._reject('Request Timeout', 408, xdr);
            };
            xdr.onprogress = function () {
            };
            xdr.open(method, url);
            if (file) {
                xdr.send(file);
            } else {
                xdr.send(data);
            }
        } else {
            throw new Error('您的浏览器不支持AJAX！');
        }

        return promise;
    };

    /**
     * 使用该方法获取一个BAAS实例：
     *
     *     var BAAS = new window.BAAS._App({
     *         serverURL: '',
     *         appId: '',
     *         appSecret: ''
     *     });
     *
     * 使用该方法在AngularJS中注入ngBaas模块：
     *
     *     var app = angular.module('app', ['ngBaas']);
     *     app.config(['$baasProvider', function ($baasProvider) {
     *         $baasProvider.init('default', {
     *             serverURL: '',
     *             appId: '',
     *             appSecret: ''
     *         });
     *     }]);
     *     app.controller('mainCtrl', ['$scope', '$baas', function ($scope, $baas) {
     *         console.log($baas['default']);
     *     }]);
     *
     * @class BAAS
     * @constructor
     * @param {Object} opt 实例参数对象
     * @param {String} opt.serverURL BAAS服务器地址
     * @param {String} opt.appId app_id
     * @param {String} opt.appSecret app_secret
     * @param {Function} opt.http 外联http函数（须实现Promise模式）
     */
    BAAS._App = function (opt) {
        opt = opt || {};

        /**
         * BAAS服务器地址
         * @property _serverURL
         * @type String
         * @default ""
         */
        this._serverURL = opt.serverURL || '';
        /**
         * BAAS APP id
         * @property _appId
         * @type String
         * @default ""
         */
        this._appId = opt.appId || '';
        /**
         * BAAS APP secret
         * @property _appSecret
         * @type String
         * @default ""
         */
        this._appSecret = opt.appSecret || '';
        /**
         * 外联http函数
         * @property _http
         * @type Function
         * @default null
         * @optional
         */
        this._http = opt.http || null;
        /**
         * 指定调用API的版本号
         * @type String
         * @default ""
         */
        this._apiVersion = opt.apiVersion || '0';
    };
    BAAS._extend(BAAS._App, {
        // 是否为BAAS._App实例
        _is: function (val) {
            return BAAS._isObject(val) && !BAAS._isUndefined(val._serverURL)
                && !BAAS._isUndefined(val._appId) && !BAAS._isUndefined(val._appSecret)
                && BAAS._isFunction(val._request);
        }
    });
    BAAS._extend(BAAS._App.prototype, {
        /**
         * 获取完整存储名称
         * @method _path
         * @param {String} str 存储名称
         * @return {String} 完整存储名称
         */
        _path: function (str) {
            if (this._appId) {
                return 'BAAS' + '/' + this._appId + '/' + str;
            } else {
                throw new Error('未定义appId！');
            }
        },
        /**
         * 数据请求
         * @method _request
         * @param {Object} opt 请求参数对象
         * @param {Object} opt.method 请求方法，GET或POST
         * @param {Object} opt.uri 请求路径
         * @param {Object} opt.cache 是否缓存
         * @param {Object} opt.version 数据接口版本
         * @param {Object} opt.data 请求数据
         * @param {Object} opt.file 请求文件（FormData对象）
         * @param {Object} opt.success 成功回调
         * @param {Object} opt.error 失败回调
         * @return {BAAS._Promise} Promise对象
         */
        _request: function (opt) {
            var method = typeof opt.method === 'string' ? opt.method : '';
            var uri = typeof opt.uri === 'string' ? opt.uri : '';
            var cache = typeof opt.cache === 'boolean' ? opt.cache : false;
            var version = typeof opt.version === 'number' ? opt.version : this._apiVersion;
            var data = typeof opt.data === 'object' ? opt.data : null;
            var file = typeof opt.file === 'object' ? opt.file : null;
            var success = typeof opt.success === 'function' ? opt.success : function () {
            };
            var error = typeof opt.error === 'function' ? opt.error : function () {
            };

            if (!this._serverURL) {
                throw new Error('未定义serverURL！');
            }
            if (!this._appId) {
                throw new Error('未定义appId！');
            }
            if (!this._appSecret) {
                throw new Error('未定义appSecret！');
            }

            var url = this._serverURL + '/' + uri;
            var reg = /^\S+\?\S+=\S*$/;
            url += reg.test(url) ? '&' : '?';
            url += 'app_id=' + this._appId;
            url += '&app_secret=' + this._appSecret;
            url += version ? '&lv=' + version : '';
            var tag = BAAS._getItem(this._path('ts'));

            //判断url是否存在admin
            var current_url = window.location.href;
            var source_admin = false;
            if(current_url.indexOf("/admin/")>0){
                source_admin = true;
            }

            //若无差别tag为空则检测本地sessionStorage
            if(tag == ""||tag==null){
                if(source_admin==true){
                    tag = sessionStorage.getItem("ts");
                }else{
                    tag = BAAS._getCookie('ts');
                }
            }

            url += tag ? '&ts=' + tag : '';

            if (method.toUpperCase() === 'GET') {
                method = 'GET';
                url += BAAS._getQuery(data);
            } else {
                data = BAAS._toJSON(data);
            }

            if (this._http && this._http.get && this._http.post) {
                if (file) {
                    return this._http.post(url, file, {
                        withCredentials: true,
                        transformRequest: function (data) {
                            return data
                        },
                        headers: {'Content-Type': undefined}
                    }).success(success).error(error);
                } else if (method === 'GET') {
                    return this._http.get(url, {
                        cache: cache,
                        opt:opt,
                        withCredentials: true
                    }).success(success).error(error);
                } else {

                    if (method.toLowerCase() == 'put') {
                        return this._http({
                            method: "put",
                            data: data,
                            url: url,
                            withCredentials: true
                        }).success(success).error(error);
                    }
                    if (method.toLowerCase() == 'delete') {
                        return this._http({
                            method: "delete",
                            data: data,
                            url: url,
                            withCredentials: true
                        }).success(success).error(error);
                    }else{
                        return this._http.post(url, data, {
                                withCredentials: true
                            }).success(success).error(error);
                    }
                    
                }
            } else {
                if (file) {
                    return BAAS._ajax({
                        method: 'POST',
                        url: url,
                        file: file
                    }).success(success).error(error);
                } else if (method === 'GET') {
                    return BAAS._ajax({
                        method: method,
                        url: url
                    }).success(success).error(error);
                } else {
                    return BAAS._ajax({
                        method: method,
                        url: url,
                        data: data
                    }).success(success).error(error);
                }
            }
        }
    });
})(window);

(function (window, angular, baas) {
    'use strict';

    if (!angular || !baas) {
        return;
    }

    // 定义ngBaas模块
    var module = angular.module('ngBaas', ['ng']);

    // 定义window.BAAS引用
    module.constant('$$baas', baas);

    // 定义$baas服务提供商
    module.provider('$baas', $BaasProvider);

    // $baas服务提供商实现
    function $BaasProvider() {
        var apps = [];

        this.init = function (name, opt) {
            if (name && opt) {
                apps.push({
                    appName: name,
                    serverURL: opt.serverURL || '',
                    appId: opt.appId || '',
                    appSecret: opt.appSecret || '',
                    apiVersion:opt.apiVersion || '0'
                });
            }
        };

        this.$get = ['$$baas', '$http', function ($$baas, $http) {
            var baas = {};
            for (var i = 0, len = apps.length; i < len; i++) {
                baas[apps[i].appName] = new $$baas._App({
                    serverURL: apps[i].serverURL,
                    appId: apps[i].appId,
                    appSecret: apps[i].appSecret,
                    http: $http,
                    apiVersion: apps[i].apiVersion
                });
            }
            return baas;
        }];
    }
})(window, window.angular, window.BAAS);

/**
 * Manager模块
 * @module Manager
 * @author Nie
 */
(function (root) {
    'use strict';
    var BAAS = root.BAAS = root.BAAS || {};

    /**
     * 用户登录方法：
     *
     *     var user = new BAAS.User();
     *     user.set('account', 'admin');
     *     user.set('password', 'admin');
     *     var current = {};
     *     var checkLogin = function () {
     *         BAAS.User_checkLogin()
     *             .success(function () {
     *                 current = BAAS.User_getCurrent();
     *             })
     *             .error(function () {
     *                 console.log('获取失败！');
     *             });
     *     };
     *     var login = function () {
     *         BAAS.User_login(user)
     *             .success(function (json) {
     *                 json = json || {};
     *                 if (json.status) {
     *                     alert('登录成功！');
     *                     checkLogin();
     *                 } else {
     *                     alert('登录失败！');
     *                 }
     *             })
     *             .error(function () {
     *                 alert('登录失败！');
     *             });
     *     };
     *     var logout = function () {
     *         BAAS.User_logout()
     *             .success(function (json) {
     *                 json = json || {};
     *                 if (json.login === 'guest') {
     *                     alert('退出成功！');
     *                     checkLogin();
     *                 } else {
     *                     alert('退出失败！');
     *                 }
     *             })
     *             .error(function () {
     *                 alert('退出失败！');
     *             });
     *     };
     *     login();
     *
     * @class BAAS.User
     * @constructor
     */
    BAAS.User = function () {
        /**
         * 用户名
         * @property account
         * @type String
         * @default ""
         */
        this.account = '';
        /**
         * 密码
         * @property password
         * @type String
         * @default ""
         */
        this.password = '';
        /**
         * 是否返回ts
         * @property with_ts
         * @type Number
         * @default 1
         */
        this.with_ts = 1;
    };
    BAAS._extend(BAAS.User, {
        /**
         * 是否是BAAS.User实例
         * @method is
         * @param {Object} val 待测对象
         * @return {Boolean} true|false
         * @static
         */
        is: function (val) {
            return BAAS._isObject(val) && !BAAS._isUndefined(val.account)
                && !BAAS._isUndefined(val.password) && !BAAS._isUndefined(val.with_ts);
        }
    });
    BAAS._extend(BAAS.User.prototype, {
        /**
         * setter方法
         * @method set
         * @param {String} key 实例属性名
         * @param {*} value 实例属性值
         * @return {Boolean} 是否成功
         */
        set: function (key, value) {
            return !!key && (this[key] = value);
        },
        /**
         * getter方法
         * @method get
         * @param {String} key 实例属性名
         * @return {*} 实例属性值或false
         */
        get: function (key) {
            return !!key && this[key];
        }
    });

    BAAS._extend(BAAS._App.prototype, {
        User: BAAS.User,

        /**
         * 用户登录
         * @method BAAS.User_login
         * @param {Object} obj BAAS.User实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        User_login: function (obj) {
            var _this = this;
            if (!BAAS.User.is(obj)) {
                throw new Error('参数类型错误！');
            }
            return _this._request({
                uri: 'manager/manager/login',
                method: 'POST',
                data: obj
            }).success(function (obj) {
                if (obj && obj.status) {
                    BAAS._setItem(_this._path('ts'), obj.ts);
                    BAAS._setItem(_this._path('manager'), obj);
                }
            });
        },
        /**
         * 用户登出
         * @method BAAS.User_logout
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        User_logout: function () {
            var _this = this;
            return _this._request({
                uri: 'manager/manager/logout',
                method: 'POST'
            }).success(function (obj) {
                if (obj && obj.login === 'guest') {
                    BAAS._removeItem(_this._path('ts'));
                    BAAS._removeItem(_this._path('manager'));
                }
            });
        },
        /**
         * 检查当前登录用户
         * @method BAAS.User_checkLogin
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        User_checkLogin: function () {
            var _this = this;
            return _this._request({
                uri: 'manager/manager/checkLogin',
                method: 'GET'
            }).success(function (obj) {
                if (obj && obj.login === 'logged') {
                    BAAS._setItem(_this._path('manager'), obj);
                }
            });
        },
        /**
         * 获取当前用户信息
         * @method BAAS.User_getCurrent
         * @return {Object} 当前用户信息
         * @static
         */
        User_getCurrent: function () {
            var _this = this;
            var manager = BAAS._getItem(_this._path('manager')) || {};
            return {
                manager_id: manager.manager_id,
                group_id: manager.group_id,
                manager_account: manager.manager_account,
                type_code: manager.type_code,
                company_filter_type: manager.company_filter_type,
                user_id: manager.user_id,
                company_code: manager.company_code,
                company_name: manager.company_name,
                moduleList: manager.moduleList,
                managerGroup: manager.managerGroup
            };
        }
    });
})(window);

(function (root) {
    'use strict';
    var BAAS = root.BAAS = root.BAAS || {};

    /**
     * 用户类型管理
     * @class BAAS.ManagerType
     * @constructor
     */
    BAAS.ManagerType = function () {
        /**
         * 类型code
         * @property code
         * @type String
         * @default ""
         */
        this.code = '';
        /**
         * 类型名称
         * @property name
         * @type String
         * @default ""
         */
        this.name = '';
        /**
         * 类型描述
         * @property description
         * @type String
         * @default ""
         */
        this.description = '';
    };
    BAAS._extend(BAAS.ManagerType, {
        /**
         * 是否是BAAS.ManagerType实例
         * @method is
         * @param {Object} val 待测对象
         * @return {Boolean} true|false
         * @static
         */
        is: function (val) {
            return BAAS._isObject(val) && !BAAS._isUndefined(val.code)
                && !BAAS._isUndefined(val.name) && !BAAS._isUndefined(val.description);
        }
    });
    BAAS._extend(BAAS.ManagerType.prototype, {
        /**
         * setter方法
         * @method set
         * @param {String} key 实例属性名
         * @param {*} value 实例属性值
         * @return {Boolean} 是否成功
         */
        set: function (key, value) {
            return !!key && (this[key] = value);
        },
        /**
         * getter方法
         * @method get
         * @param {String} key 实例属性名
         * @return {*} 实例属性值或false
         */
        get: function (key) {
            return !!key && this[key];
        }
    });

    BAAS._extend(BAAS._App.prototype, {
        ManagerType: BAAS.ManagerType,

        /**
         * 获取用户类型列表
         * @method BAAS.ManagerType_listTypes
         * @param {Object} opt 可选参数对象
         * @param {Number} opt.limit 每页数量
         * @param {Number} opt.page 页码
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        ManagerType_listTypes: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: 'manager/type/list',
                method: 'GET',
                data: opt
            });
        },
        /**
         * 保存用户类型
         * @method BAAS.ManagerType_saveType
         * @param {Object} obj BAAS.ManagerType实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        ManagerType_saveType: function (obj) {
            var _this = this;
            if (!BAAS.ManagerType.is(obj)) {
                throw new Error('参数类型错误！');
            }
            var id = obj._id || 0;
            obj._id = undefined;
            return _this._request({
                uri: 'manager/type/edit/' + id,
                method: 'POST',
                data: obj
            });
        },
        /**
         * 删除用户类型
         * @method BAAS.ManagerType_deleteType
         * @param {Object} obj BAAS.ManagerType实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        ManagerType_deleteType: function (obj) {
            var _this = this;
            if (!BAAS.ManagerType.is(obj)) {
                throw new Error('参数类型错误！');
            }
            return _this._request({
                uri: 'manager/type/delete',
                method: 'POST',
                data: {
                    code: obj.code || ''
                }
            });
        }
    });
})(window);

(function (root) {
    'use strict';
    var BAAS = root.BAAS = root.BAAS || {};

    /**
     * 用户组管理
     * @class BAAS.ManagerGroup
     * @constructor
     */
    BAAS.ManagerGroup = function () {
        /**
         * 权限列表
         * @property auth
         * @type Array
         * @default []
         */
        this.auth = [];
        /**
         * 权限过滤列表
         * @property auth_filter
         * @type Array
         * @default []
         */
        this.auth_filter = [];
        /**
         * 公司code列表
         * @property company_code
         * @type Array
         * @default []
         */
        this.company_code = [];
        /**
         * 公司类型过滤
         * @property company_filter_type
         * @type String
         * @default ""
         */
        this.company_filter_type = '';
        /**
         * 公司名称列表
         * @property company_name
         * @type Array
         * @default []
         */
        this.company_name = [];
        /**
         * 组名称
         * @property groupName
         * @type String
         * @default ""
         */
        this.groupName = '';
        /**
         * 父组id
         * @property parentGroupId
         * @type String
         * @default undefined
         */
        this.parentGroupId = undefined;
    };
    BAAS._extend(BAAS.ManagerGroup, {
        /**
         * 是否是BAAS.ManagerGroup实例
         * @method is
         * @param {Object} val 待测对象
         * @return {Boolean} true|false
         * @static
         */
        is: function (val) {
            return BAAS._isObject(val) && !BAAS._isUndefined(val.auth)
                && !BAAS._isUndefined(val.company_code) && !BAAS._isUndefined(val.groupName);
        }
    });
    BAAS._extend(BAAS.ManagerGroup.prototype, {
        /**
         * setter方法
         * @method set
         * @param {String} key 实例属性名
         * @param {*} value 实例属性值
         * @return {Boolean} 是否成功
         */
        set: function (key, value) {
            return !!key && (this[key] = value);
        },
        /**
         * getter方法
         * @method get
         * @param {String} key 实例属性名
         * @return {*} 实例属性值或false
         */
        get: function (key) {
            return !!key && this[key];
        }
    });

    BAAS._extend(BAAS._App.prototype, {
        ManagerGroup: BAAS.ManagerGroup,

        /**
         * 获取用户组列表
         * @method BAAS.ManagerGroup_listGroups
         * @param {Object} opt 可选参数对象
         * @param {Number} opt.limit 每页数量
         * @param {Number} opt.page 页码
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        ManagerGroup_listGroups: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: 'manager/group/list',
                method: 'GET',
                data: opt
            });
        },
        /**
         * 保存用户组
         * @method BAAS.ManagerGroup_saveGroup
         * @param {Object} obj BAAS.ManagerGroup实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        ManagerGroup_saveGroup: function (obj) {
            var _this = this;
            if (!BAAS.ManagerGroup.is(obj)) {
                throw new Error('参数类型错误！');
            }
            var id = obj._id || 0;
            obj._id = undefined;
            return _this._request({
                uri: 'manager/group/edit/' + id,
                method: 'POST',
                data: obj
            });
        },
        /**
         * 删除用户组
         * @method BAAS.ManagerGroup_deleteGroup
         * @param {Object} obj BAAS.ManagerGroup实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        ManagerGroup_deleteGroup: function (obj) {
            var _this = this;
            if (!BAAS.ManagerGroup.is(obj)) {
                throw new Error('参数类型错误！');
            }
            return _this._request({
                uri: 'manager/group/delete',
                method: 'POST',
                data: {
                    code: obj._id || ''
                }
            });
        },

        /**
         * 通过父组id获取子组列表
         * @method BAAS.ManagerGroup_listSubGroups
         * @param {String} id 父组id
         * @param {Object} opt 可选参数对象
         * @param {Number} opt.limit 每页数量
         * @param {Number} opt.page 页码
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        ManagerGroup_listSubGroups: function (id, opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: 'manager/group/subList/' + id,
                method: 'GET',
                data: opt
            });
        },
        /**
         * 通过公司code获取组列表
         * @method BAAS.ManagerGroup_listGroupsInCompany
         * @param {String} id 公司code
         * @param {Object} opt 可选参数对象
         * @param {Number} opt.limit 每页数量
         * @param {Number} opt.page 页码
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        ManagerGroup_listGroupsInCompany: function (id, opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: 'manager/group/search/group/' + id,
                method: 'GET',
                data: opt
            });
        }
    });
})(window);

(function (root) {
    'use strict';
    var BAAS = root.BAAS = root.BAAS || {};

    /**
     * 用户管理
     * @class BAAS.Manager
     * @constructor
     */
    BAAS.Manager = function () {
        /**
         * 用户名
         * @property account
         * @type String
         * @default ""
         */
        this.account = '';
        /**
         * 组id
         * @property group_id
         * @type String
         * @default ""
         */
        this.group_id = '';
        /**
         * 昵称
         * @property nickname
         * @type String
         * @default ""
         */
        this.nickname = '';
        /**
         * 密码
         * @property password
         * @type String
         * @default ""
         */
        this.password = '';
        /**
         * 类型code
         * @property type_code
         * @type String
         * @default ""
         */
        this.type_code = '';
        /**
         * 类型名称
         * @property type_name
         * @type String
         * @default ""
         */
        this.type_name = '';
        /**
         * 父组id
         * @property parentGroupId
         * @type String
         * @default undefined
         */
        this.parentGroupId = undefined;
    };
    BAAS._extend(BAAS.Manager, {
        /**
         * 是否是BAAS.Manager实例
         * @method is
         * @param {Object} val 待测对象
         * @return {Boolean} true|false
         * @static
         */
        is: function (val) {
            return BAAS._isObject(val) && !BAAS._isUndefined(val.account)
                && !BAAS._isUndefined(val.group_id) && !BAAS._isUndefined(val.nickname)
                && !BAAS._isUndefined(val.password) && !BAAS._isUndefined(val.type_code);
        }
    });
    BAAS._extend(BAAS.Manager.prototype, {
        /**
         * setter方法
         * @method set
         * @param {String} key 实例属性名
         * @param {*} value 实例属性值
         * @return {Boolean} 是否成功
         */
        set: function (key, value) {
            return !!key && (this[key] = value);
        },
        /**
         * getter方法
         * @method get
         * @param {String} key 实例属性名
         * @return {*} 实例属性值或false
         */
        get: function (key) {
            return !!key && this[key];
        }
    });

    BAAS._extend(BAAS._App.prototype, {
        Manager: BAAS.Manager,

        /**
         * 获取用户列表
         * @method BAAS.Manager_listManagers
         * @param {Object} opt 可选参数对象
         * @param {Number} opt.limit 每页数量
         * @param {Number} opt.page 页码
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Manager_listManagers: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: 'manager/manager/list',
                method: 'GET',
                data: opt
            });
        },
        /**
         * 保存用户
         * @method BAAS.Manager_saveManager
         * @param {Object} obj BAAS.Manager实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Manager_saveManager: function (obj) {
            var _this = this;
            if (!BAAS.Manager.is(obj)) {
                throw new Error('参数类型错误！');
            }
            var id = obj._id || 0;
            obj._id = undefined;
            return _this._request({
                uri: 'manager/manager/edit/' + id,
                method: 'POST',
                data: obj
            });
        },
        /**
         * 删除用户
         * @method BAAS.Manager_deleteManager
         * @param {Object} obj BAAS.Manager实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Manager_deleteManager: function (obj) {
            var _this = this;
            if (!BAAS.Manager.is(obj)) {
                throw new Error('参数类型错误！');
            }
            return _this._request({
                uri: 'manager/manager/delete',
                method: 'POST',
                data: {
                    code: obj._id || ''
                }
            });
        },

        /**
         * 通过父组id获取用户列表
         * @method BAAS.Manager_listSubManagers
         * @param {String} id 父组id
         * @param {Object} opt 可选参数对象
         * @param {Number} opt.limit 每页数量
         * @param {Number} opt.page 页码
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Manager_listSubManagers: function (id, opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: 'manager/manager/subList/' + id,
                method: 'GET',
                data: opt
            });
        }
    });
})(window);

(function (root) {
    'use strict';
    var BAAS = root.BAAS = root.BAAS || {};

    /**
     * 用户个性化信息
     * @class BAAS.ManagerInfo
     * @constructor
     */
    BAAS.ManagerInfo = function () {
        /**
         * 头像
         * @property head_img_url
         * @type String
         * @default ""
         */
        this.head_img_url = '';
        /**
         * 主题
         * @property skin
         * @type String
         * @default ""
         */
        this.skin = '';
        /**
         * 邮箱
         * @property mail
         * @type String
         * @default ""
         */
        this.mail = '';
        /**
         * 手机号
         * @property phone
         * @type String
         * @default ""
         */
        this.phone = '';
        /**
         * 提醒设置
         * @property remind
         * @type String
         * @default ""
         */
        this.remind = '';
        /**
         * 用户id
         * @property manager_id
         * @type String
         * @default ""
         */
        this.manager_id = '';
    };
    BAAS._extend(BAAS.ManagerInfo, {
        /**
         * 是否是BAAS.ManagerInfo实例
         * @method is
         * @param {Object} val 待测对象
         * @return {Boolean} true|false
         * @static
         */
        is: function (val) {
            return BAAS._isObject(val) && !BAAS._isUndefined(val.head_img_url)
                && !BAAS._isUndefined(val.skin) && !BAAS._isUndefined(val.mail)
                && !BAAS._isUndefined(val.phone) && !BAAS._isUndefined(val.manager_id);
        }
    });
    BAAS._extend(BAAS.ManagerInfo.prototype, {
        /**
         * setter方法
         * @method set
         * @param {String} key 实例属性名
         * @param {*} value 实例属性值
         * @return {Boolean} 是否成功
         */
        set: function (key, value) {
            return !!key && (this[key] = value);
        },
        /**
         * getter方法
         * @method get
         * @param {String} key 实例属性名
         * @return {*} 实例属性值或false
         */
        get: function (key) {
            return !!key && this[key];
        }
    });

    BAAS._extend(BAAS._App.prototype, {
        ManagerInfo: BAAS.ManagerInfo,

        /**
         * 获取用户个性化信息
         * @method BAAS.ManagerInfo_getInfo
         * @param {String} id 用户id
         * @param {Object} opt 可选参数对象
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        ManagerInfo_getInfo: function (id, opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: 'manager/managerInfo/code/' + id,
                method: 'GET',
                version: 1,
                data: opt
            });
        },
        /**
         * 保存用户个性化信息
         * @method BAAS.ManagerInfo_saveInfo
         * @param {Object} obj BAAS.ManagerInfo实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        ManagerInfo_saveInfo: function (obj) {
            var _this = this;
            if (!BAAS.ManagerInfo.is(obj)) {
                throw new Error('参数类型错误！');
            }
            obj._id = undefined;
            return _this._request({
                uri: 'manager/managerInfo/edit',
                method: 'POST',
                version: 1,
                data: obj
            });
        },
        /**
         * 删除用户个性化信息
         * @method BAAS.ManagerInfo_deleteInfo
         * @param {Object} obj BAAS.ManagerInfo实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        ManagerInfo_deleteInfo: function (obj) {
            var _this = this;
            if (!BAAS.ManagerInfo.is(obj)) {
                throw new Error('参数类型错误！');
            }
            return _this._request({
                uri: 'manager/managerInfo/delete',
                method: 'POST',
                version: 1,
                data: {
                    manager_id: obj.manager_id || ''
                }
            });
        },

        /**
         * 上传用户头像
         * @method BAAS.ManagerInfo_uploadFile
         * @param {Object} file FormData对象
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        ManagerInfo_uploadFile: function (file) {
            var _this = this;
            return _this._request({
                uri: 'manager/managerInfo/uploadFile',
                method: 'POST',
                version: 1,
                file: file || ''
            });
        }
    });
})(window);

(function (root) {
    'use strict';
    var BAAS = root.BAAS = root.BAAS || {};

    /**
     * 组菜单管理
     * @class BAAS.GroupMenu
     * @constructor
     */
    BAAS.GroupMenu = function () {
        /**
         * 菜单名称
         * @property title
         * @type String
         * @default ""
         */
        this.title = '';
        /**
         * 是否含有子节点，是或否
         * @property childnode
         * @type String
         * @default ""
         */
        this.childnode = '';
        /**
         * 是否启用，0或1
         * @property isvalid
         * @type Number
         * @default 1
         */
        this.isvalid = 1;
        /**
         * url地址
         * @property url
         * @type String
         * @default ""
         */
        this.url = '';
        /**
         * 父节点id
         * @property parent_id
         * @type String
         * @default 0
         */
        this.parent_id = 0;
        /**
         * 组id
         * @property group_id
         * @type String
         * @default undefined
         */
        this.group_id = undefined;
    };
    BAAS._extend(BAAS.GroupMenu, {
        /**
         * 是否是BAAS.GroupMenu实例
         * @method is
         * @param {Object} val 待测对象
         * @return {Boolean} true|false
         * @static
         */
        is: function (val) {
            return BAAS._isObject(val) && !BAAS._isUndefined(val.title)
                && !BAAS._isUndefined(val.childnode) && !BAAS._isUndefined(val.isvalid)
                && !BAAS._isUndefined(val.url) && !BAAS._isUndefined(val.parent_id);
        }
    });
    BAAS._extend(BAAS.GroupMenu.prototype, {
        /**
         * setter方法
         * @method set
         * @param {String} key 实例属性名
         * @param {*} value 实例属性值
         * @return {Boolean} 是否成功
         */
        set: function (key, value) {
            return !!key && (this[key] = value);
        },
        /**
         * getter方法
         * @method get
         * @param {String} key 实例属性名
         * @return {*} 实例属性值或false
         */
        get: function (key) {
            return !!key && this[key];
        }
    });

    BAAS._extend(BAAS._App.prototype, {
        GroupMenu: BAAS.GroupMenu,

        /**
         * 获取菜单列表
         * @method BAAS.GroupMenu_listMenus
         * @param {String} id 父节点id，顶级菜单为0
         * @param {Object} opt 可选参数对象
         * @param {Number} opt.limit 每页数量
         * @param {Number} opt.page 页码
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        GroupMenu_listMenus: function (id, opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: 'manager/menu/list/' + id,
                method: 'GET',
                version: 1,
                data: opt
            });
        },
        /**
         * 获取菜单
         * @method BAAS.GroupMenu_getMenu
         * @param {String} id 菜单id
         * @param {Object} opt 可选参数对象
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        GroupMenu_getMenu: function (id, opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: 'manager/menu/id/' + id,
                method: 'GET',
                version: 1,
                data: opt
            });
        },
        /**
         * 保存菜单
         * @method BAAS.GroupMenu_saveMenu
         * @param {Object} obj BAAS.GroupMenu实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        GroupMenu_saveMenu: function (obj) {
            var _this = this;
            if (!BAAS.GroupMenu.is(obj)) {
                throw new Error('参数类型错误！');
            }
            var id = obj._id || 0;
            obj._id = undefined;
            return _this._request({
                uri: 'manager/menu/editmenu/' + id,
                method: 'POST',
                version: 1,
                data: obj
            });
        },
        /**
         * 删除菜单
         * @method BAAS.GroupMenu_deleteMenu
         * @param {Object} obj BAAS.GroupMenu实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        GroupMenu_deleteMenu: function (obj) {
            var _this = this;
            if (!BAAS.GroupMenu.is(obj)) {
                throw new Error('参数类型错误！');
            }
            return _this._request({
                uri: 'manager/menu/deletemenu',
                method: 'POST',
                version: 1,
                data: {
                    _id: obj._id || ''
                }
            });
        }
    });
})(window);

/**
 * Company模块
 * @module Company
 * @author Nie
 */
(function (root) {
    'use strict';
    var BAAS = root.BAAS = root.BAAS || {};

    /**
     * 服务商管理
     * @class BAAS.Company
     * @constructor
     * @param {Object} opt 参数对象
     * @param {String} opt.name 公司名称
     * @param {String} opt.code 公司code
     * @param {String} opt.faren 公司法人
     * @param {String} opt.address 公司地址
     * @param {String} opt.fuzeren 负责人
     * @param {String} opt.years 经营时长
     * @param {String} opt.telephone 联系电话
     * @param {String} opt.logo 公司logo
     * @param {Array} opt.services 服务项目
     * @param {String} opt.send_order_qy_account 消息推送企业账号
     * @param {String} opt.autoAddOrder 自动接收
     * @param {String} opt.longitude 经度
     * @param {String} opt.latitude 纬度
     */
    BAAS.Company = function (opt) {
        opt = opt || {};
        /**
         * 公司名称
         * @property name
         * @type String
         * @default ""
         */
        this.name = opt.name || '';
        /**
         * 公司code
         * @property code
         * @type String
         * @default ""
         */
        this.code = opt.code || '';
        /**
         * 公司法人
         * @property faren
         * @type String
         * @default ""
         */
        this.faren = opt.faren || '';
        /**
         * 公司地址
         * @property address
         * @type String
         * @default ""
         */
        this.address = opt.address || '';
        /**
         * 负责人
         * @property fuzeren
         * @type String
         * @default ""
         */
        this.fuzeren = opt.fuzeren || '';
        /**
         * 经营时长
         * @property years
         * @type String
         * @default ""
         */
        this.years = opt.years || '';
        /**
         * 联系电话
         * @property telephone
         * @type String
         * @default ""
         */
        this.telephone = opt.telephone || '';
        /**
         * 公司logo
         * @property logo
         * @type String
         * @default ""
         */
        this.logo = opt.logo || '';
        /**
         * 服务项目
         * @property services
         * @type Array
         * @default []
         */
        this.services = opt.services || [];
        /**
         * 消息推送企业账号
         * @property send_order_qy_account
         * @type String
         * @default ""
         */
        this.send_order_qy_account = opt.send_order_qy_account || '';
        /**
         * 自动接收
         * @property autoAddOrder
         * @type String
         * @default ""
         */
        this.autoAddOrder = opt.autoAddOrder || '';
        /**
         * 经度
         * @property longitude
         * @type String
         * @default ""
         */
        this.longitude = opt.longitude || '';
        /**
         * 纬度
         * @property latitude
         * @type String
         * @default ""
         */
        this.latitude = opt.latitude || '';
    };
    BAAS._extend(BAAS.Company, {
        /**
         * 是否是BAAS.Company实例
         * @method is
         * @param {Object} val 待测对象
         * @return {Boolean} true|false
         * @static
         */
        is: function (val) {
            return BAAS._isObject(val) && !BAAS._isUndefined(val.name)
                && !BAAS._isUndefined(val.code) && !BAAS._isUndefined(val.faren)
                && !BAAS._isUndefined(val.address) && !BAAS._isUndefined(val.fuzeren)
                && !BAAS._isUndefined(val.years) && !BAAS._isUndefined(val.telephone)
                && !BAAS._isUndefined(val.services);
        }
    });
    BAAS._extend(BAAS.Company.prototype, {
        /**
         * setter方法
         * @method set
         * @param {String} key 实例属性名
         * @param {*} value 实例属性值
         * @return {Boolean} 是否成功
         */
        set: function (key, value) {
            return !!key && (this[key] = value);
        },
        /**
         * getter方法
         * @method get
         * @param {String} key 实例属性名
         * @return {*} 实例属性值或false
         */
        get: function (key) {
            return !!key && this[key];
        }
    });

    BAAS._extend(BAAS._App.prototype, {
        Company: BAAS.Company,

        /**
         * 获取服务商
         * @method BAAS.Company_getCompany
         * @param {String} id 公司code
         * @param {Object} opt 可选参数对象
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Company_getCompany: function (id, opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: 'company/company/code/' + id,
                method: 'GET',
                version: 1,
                data: opt
            });
        },
        /**
         * 保存服务商
         * @method BAAS.Company_saveCompany
         * @param {Object} obj BAAS.Company实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Company_saveCompany: function (obj) {
            var _this = this;
            if (!BAAS.Company.is(obj)) {
                throw new Error('参数类型错误！');
            }
            obj._id = undefined;
            return _this._request({
                uri: 'company/company/edit',
                method: 'POST',
                version: 1,
                data: obj
            });
        },
        /**
         * 删除服务商
         * @method BAAS.Company_deleteCompany
         * @param {Object} obj BAAS.Company实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Company_deleteCompany: function (obj) {
            var _this = this;
            if (!BAAS.Company.is(obj)) {
                throw new Error('参数类型错误！');
            }
            return _this._request({
                uri: 'company/company/delete',
                method: 'POST',
                version: 1,
                data: {
                    code: obj.code || ''
                }
            });
        },
        /**
         * 批量导入服务商
         * @method BAAS.Company_importCompanies
         * @param {Object} str excel路径
         * @param {Object} opt 可选参数对象
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Company_importCompanies: function (str, opt) {
            var _this = this;
            opt = opt || {};
            opt.path = str || '';
            return _this._request({
                uri: 'company/company/import',
                method: 'POST',
                version: 1,
                data: opt
            });
        },

        /**
         * 获取服务商列表
         * @method BAAS.Company_listCompanies
         * @param {Object} opt 可选参数对象
         * @param {Number} opt.limit 每页数量
         * @param {Number} opt.page 页码
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Company_listCompanies: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: 'company/company/list',
                method: 'GET',
                version: 1,
                data: opt
            });
        },
        /**
         * 按条件搜索服务商
         * @method BAAS.Company_searchCompanies
         * @param {Object} opt 可选参数对象
         * @param {Number} opt.limit 每页数量
         * @param {Number} opt.page 页码
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Company_searchCompanies: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: 'company/company/search/company',
                method: 'POST',
                version: 1,
                data: opt
            });
        },

        /**
         * 上传excel文件
         * @method BAAS.Company_uploadFile
         * @param {Object} file FormData对象
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Company_uploadFile: function (file) {
            var _this = this;
            return _this._request({
                uri: 'company/company/uploadFile',
                method: 'POST',
                version: 1,
                file: file || ''
            });
        },
        /**
         * 上传图片
         * @method BAAS.Company_upload
         * @param {Object} file FormData对象
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Company_upload: function (file) {
            var _this = this;
            return _this._request({
                uri: 'company/company/upload',
                method: 'POST',
                version: 1,
                file: file || ''
            });
        }
    });
})(window);

/**
 * Resource模块
 * @module Resource
 * @author Nie
 */
(function (root) {
    'use strict';
    var BAAS = root.BAAS = root.BAAS || {};

    /**
     * 资源信息
     * @class BAAS.Resource
     * @constructor
     * @param {Object} opt 参数对象
     * @param {String} opt.name 资源名称
     * @param {String} opt.code 资源code
     * @param {String} opt.status 资源状态
     * @param {String} opt.company_code 公司code
     * @param {String} opt.company_name 公司名称
     * @param {String} opt.address1_name 一级地址名称
     * @param {String} opt.address1_code 一级地址code
     * @param {String} opt.address2_name 二级地址名称
     * @param {String} opt.address2_code 二级地址code
     * @param {String} opt.address3_name 三级地址名称
     * @param {String} opt.address3_code 三级地址code
     * @param {String} opt.desc 资源描述
     * @param {Object} opt.info 资源详细信息
     * @param {String} opt.info.specification 资源规格
     * @param {String} opt.info.term 资源使用年限
     */
    BAAS.Resource = function (opt) {
        opt = opt || {};
        /**
         * 资源名称
         * @property name
         * @type String
         * @default ""
         */
        this.name = opt.name || '';
        /**
         * 资源code
         * @property code
         * @type String
         * @default ""
         */
        this.code = opt.code || '';
        /**
         * 资源状态
         * @property status
         * @type String
         * @default ""
         */
        this.status = opt.status || '';
        /**
         * 公司code
         * @property company_code
         * @type String
         * @default ""
         */
        this.company_code = opt.company_code || '';
        /**
         * 公司名称
         * @property company_name
         * @type String
         * @default ""
         */
        this.company_name = opt.company_name || '';
        /**
         * 一级地址名称
         * @property address1_name
         * @type String
         * @default ""
         */
        this.address1_name = opt.address1_name || '';
        /**
         * 一级地址code
         * @property address1_code
         * @type String
         * @default ""
         */
        this.address1_code = opt.address1_code || '';
        /**
         * 二级地址名称
         * @property address2_name
         * @type String
         * @default ""
         */
        this.address2_name = opt.address2_name || '';
        /**
         * 二级地址code
         * @property address2_code
         * @type String
         * @default ""
         */
        this.address2_code = opt.address2_code || '';
        /**
         * 三级地址名称
         * @property address3_name
         * @type String
         * @default ""
         */
        this.address3_name = opt.address3_name || '';
        /**
         * 三级地址code
         * @property address3_code
         * @type String
         * @default ""
         */
        this.address3_code = opt.address3_code || '';
        /**
         * 资源描述
         * @property desc
         * @type String
         * @default ""
         */
        this.desc = opt.desc || '';
        /**
         * 资源详细信息
         * @property info
         * @type Object
         * @default {}
         */
        this.info = opt.info || {};
    };
    BAAS._extend(BAAS.Resource, {
        /**
         * 是否是BAAS.Resource实例
         * @method is
         * @param {Object} val 待测对象
         * @return {Boolean} true|false
         * @static
         */
        is: function (val) {
            return BAAS._isObject(val) && !BAAS._isUndefined(val.name)
                && !BAAS._isUndefined(val.code) && !BAAS._isUndefined(val.status)
                && !BAAS._isUndefined(val.company_code) && !BAAS._isUndefined(val.company_name)
                && !BAAS._isUndefined(val.desc) && !BAAS._isUndefined(val.info);
        }
    });
    BAAS._extend(BAAS.Resource.prototype, {
        /**
         * setter方法
         * @method set
         * @param {String} key 实例属性名
         * @param {*} value 实例属性值
         * @return {Boolean} 是否成功
         */
        set: function (key, value) {
            return !!key && (this[key] = value);
        },
        /**
         * getter方法
         * @method get
         * @param {String} key 实例属性名
         * @return {*} 实例属性值或false
         */
        get: function (key) {
            return !!key && this[key];
        }
    });

    BAAS._extend(BAAS._App.prototype, {
        Resource: BAAS.Resource,

        /**
         * 获取资源
         * @method BAAS.Resource_getResource
         * @param {String} id 资源id
         * @param {Object} opt 可选参数对象
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Resource_getResource: function (id, opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: 'resource/resource/id/' + id,
                method: 'GET',
                version: 1,
                data: opt
            });
        },
        /**
         * 保存资源
         * @method BAAS.Resource_saveResource
         * @param {Object} obj BAAS.Resource实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Resource_saveResource: function (obj) {
            var _this = this;
            if (!BAAS.Resource.is(obj)) {
                throw new Error('参数类型错误！');
            }
            var id = obj._id || 0;
            obj._id = undefined;
            return _this._request({
                uri: 'resource/resource/edit/' + id,
                method: 'POST',
                version: 1,
                data: obj
            });
        },
        /**
         * 删除资源
         * @method BAAS.Resource_deleteResource
         * @param {Object} obj BAAS.Resource实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Resource_deleteResource: function (obj) {
            var _this = this;
            if (!BAAS.Resource.is(obj)) {
                throw new Error('参数类型错误！');
            }
            return _this._request({
                uri: 'resource/resource/delete',
                method: 'POST',
                version: 1,
                data: {
                    _id: obj._id || ''
                }
            });
        },
        /**
         * 获取资源列表
         * @method BAAS.Resource_listResources
         * @param {Object} opt 可选参数对象
         * @param {Number} opt.limit 每页数量
         * @param {Number} opt.page 页码
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Resource_listResources: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: 'resource/resource/list',
                method: 'GET',
                version: 1,
                data: opt
            });
        }
    });
})(window);

/**
 * ServiceType模块
 * @module ServiceType
 * @author Nie
 */
(function (root) {
    'use strict';
    var BAAS = root.BAAS = root.BAAS || {};

    /**
     * 服务类型管理
     * @class BAAS.ServiceType
     * @constructor
     * @param {Object} opt 参数对象
     * @param {String} opt.title 服务名称
     * @param {String} opt.code 服务code
     * @param {String} opt.parent_code 父服务code
     * @param {String} opt.level 服务级别
     * @param {String} opt.standard 服务标准
     * @param {String} opt.shigong 服务试工
     * @param {String} opt.range 服务范围
     */
    BAAS.ServiceType = function (opt) {
        opt = opt || {};
        /**
         * 服务名称
         * @property title
         * @type String
         * @default ""
         */
        this.title = opt.title || '';
        /**
         * 服务code
         * @property code
         * @type String
         * @default ""
         */
        this.code = opt.code || '';
        /**
         * 父服务code
         * @property parent_code
         * @type String
         * @default 0
         */
        this.parent_code = opt.parent_code || 0;
        /**
         * 服务级别
         * @property level
         * @type String
         * @default ""
         */
        this.level = opt.level || '';
        /**
         * 服务标准
         * @property standard
         * @type String
         * @default ""
         */
        this.standard = opt.standard || '';
        /**
         * 服务试工
         * @property shigong
         * @type String
         * @default ""
         */
        this.shigong = opt.shigong || '';
        /**
         * 服务范围
         * @property range
         * @type String
         * @default ""
         */
        this.range = opt.range || '';
    };
    BAAS._extend(BAAS.ServiceType, {
        /**
         * 是否是BAAS.ServiceType实例
         * @method is
         * @param {Object} val 待测对象
         * @return {Boolean} true|false
         * @static
         */
        is: function (val) {
            return BAAS._isObject(val) && !BAAS._isUndefined(val.title)
                && !BAAS._isUndefined(val.code) && !BAAS._isUndefined(val.parent_code)
                && !BAAS._isUndefined(val.level) && !BAAS._isUndefined(val.standard)
                && !BAAS._isUndefined(val.shigong) && !BAAS._isUndefined(val.range);
        }
    });
    BAAS._extend(BAAS.ServiceType.prototype, {
        /**
         * setter方法
         * @method set
         * @param {String} key 实例属性名
         * @param {*} value 实例属性值
         * @return {Boolean} 是否成功
         */
        set: function (key, value) {
            return !!key && (this[key] = value);
        },
        /**
         * getter方法
         * @method get
         * @param {String} key 实例属性名
         * @return {*} 实例属性值或false
         */
        get: function (key) {
            return !!key && this[key];
        }
    });

    BAAS._extend(BAAS._App.prototype, {
        ServiceType: BAAS.ServiceType,

        /**
         * 获取公共服务项目列表
         * @method BAAS.ServiceType_listPublicServices
         * @param {Object} opt 可选参数对象
         * @param {Number} opt.limit 每页数量
         * @param {Number} opt.page 页码
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        ServiceType_listPublicServices: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: 'serviceType/index/public/service/list',
                method: 'GET',
                data: opt
            });
        },
        /**
         * 获取私有服务项目列表
         * @method BAAS.ServiceType_listPrivateServices
         * @param {Object} opt 可选参数对象
         * @param {Number} opt.limit 每页数量
         * @param {Number} opt.page 页码
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        ServiceType_listPrivateServices: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: 'serviceType/index/search/service/list',
                method: 'GET',
                data: opt
            });
        },
        /**
         * 复制公有服务项目到私有服务项目中
         * @method BAAS.ServiceType_copyServicesToPrivate
         * @param {Array} arr 要复制的公共服务小项code数组
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        ServiceType_copyServicesToPrivate: function (arr) {
            var _this = this;
            return _this._request({
                uri: 'serviceType/index/add/public/service',
                method: 'POST',
                data: {
                    code: arr || []
                }
            });
        },
        /**
         * 获取指定code下包含的服务项目列表
         * @method BAAS.ServiceType_listServices
         * @param {String} id 服务项目code
         * @param {Object} opt 可选参数对象
         * @param {Number} opt.limit 每页数量
         * @param {Number} opt.page 页码
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        ServiceType_listServices: function (id, opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: 'serviceType/index/list/' + id,
                method: 'GET',
                data: opt
            });
        },
        /**
         * 保存服务项目
         * @method BAAS.ServiceType_saveService
         * @param {Object} obj BAAS.ServiceType实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        ServiceType_saveService: function (obj) {
            var _this = this;
            if (!BAAS.ServiceType.is(obj)) {
                throw new Error('参数类型错误！');
            }
            obj._id = undefined;
            return _this._request({
                uri: 'serviceType/index/edit',
                method: 'POST',
                data: obj
            });
        },
        /**
         * 删除服务项目
         * @method BAAS.ServiceType_deleteService
         * @param {Object} obj BAAS.ServiceType实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        ServiceType_deleteService: function (obj) {
            var _this = this;
            if (!BAAS.ServiceType.is(obj)) {
                throw new Error('参数类型错误！');
            }
            return _this._request({
                uri: 'serviceType/index/delete',
                method: 'POST',
                data: {
                    code: obj.code || ''
                }
            });
        },
        /**
         * 获取所有服务项目以及对应关系
         * @method BAAS.ServiceType_getServiceMap
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        ServiceType_getServiceMap: function () {
            var _this = this;
            return _this._request({
                uri: 'serviceType/index/map',
                method: 'GET'
            });
        }
    });
})(window);

/**
 * OrderType模块
 * @module OrderType
 * @author Nie
 */
(function (root) {
    'use strict';
    var BAAS = root.BAAS = root.BAAS || {};

    /**
     * 订单状态
     * @class BAAS.OrderType
     * @constructor
     * @param {Object} opt 参数对象
     * @param {String} opt.name 订单状态名称
     * @param {String} opt.code 订单状态code
     * @param {String} opt.content 订单状态描述
     * @param {String} opt.sortNum 订单状态序号
     */
    BAAS.OrderType = function (opt) {
        opt = opt || {};
        /**
         * 订单状态名称
         * @property name
         * @type String
         * @default ""
         */
        this.name = opt.name || '';
        /**
         * 订单状态code
         * @property code
         * @type String
         * @default ""
         */
        this.code = opt.code || '';
        /**
         * 订单状态描述
         * @property content
         * @type String
         * @default ""
         */
        this.content = opt.content || '';
        /**
         * 订单状态序号
         * @property sortNum
         * @type String
         * @default ""
         */
        this.sortNum = opt.sortNum || '';
    };
    BAAS._extend(BAAS.OrderType, {
        /**
         * 是否是BAAS.OrderType实例
         * @method is
         * @param {Object} val 待测对象
         * @return {Boolean} true|false
         * @static
         */
        is: function (val) {
            return BAAS._isObject(val) && !BAAS._isUndefined(val.name)
                && !BAAS._isUndefined(val.code) && !BAAS._isUndefined(val.content)
                && !BAAS._isUndefined(val.sortNum);
        }
    });
    BAAS._extend(BAAS.OrderType.prototype, {
        /**
         * setter方法
         * @method set
         * @param {String} key 实例属性名
         * @param {*} value 实例属性值
         * @return {Boolean} 是否成功
         */
        set: function (key, value) {
            return !!key && (this[key] = value);
        },
        /**
         * getter方法
         * @method get
         * @param {String} key 实例属性名
         * @return {*} 实例属性值或false
         */
        get: function (key) {
            return !!key && this[key];
        }
    });

    BAAS._extend(BAAS._App.prototype, {
        OrderType: BAAS.OrderType,

        /**
         * 获取订单状态
         * @method BAAS.OrderType_getType
         * @param {String} id 订单状态code
         * @param {Object} opt 可选参数对象
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        OrderType_getType: function (id, opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: 'basicData/orderType/code/' + id,
                method: 'GET',
                data: opt
            });
        },
        /**
         * 保存订单状态
         * @method BAAS.OrderType_saveType
         * @param {Object} obj BAAS.OrderType实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        OrderType_saveType: function (obj) {
            var _this = this;
            if (!BAAS.OrderType.is(obj)) {
                throw new Error('参数类型错误！');
            }
            var id = obj._id || 0;
            obj._id = undefined;
            return _this._request({
                uri: 'basicData/orderType/edit/' + id,
                method: 'POST',
                version: 1,
                data: obj
            });
        },
        /**
         * 删除订单状态
         * @method BAAS.OrderType_deleteType
         * @param {Object} obj BAAS.OrderType实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        OrderType_deleteType: function (obj) {
            var _this = this;
            if (!BAAS.OrderType.is(obj)) {
                throw new Error('参数类型错误！');
            }
            return _this._request({
                uri: 'basicData/orderType/delete',
                method: 'POST',
                version: 1,
                data: {
                    code: obj.code || ''
                }
            });
        },

        /**
         * 获取订单状态列表
         * @method BAAS.OrderType_listTypes
         * @param {Object} opt 可选参数对象
         * @param {Number} opt.limit 每页数量
         * @param {Number} opt.page 页码
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        OrderType_listTypes: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: 'basicData/orderType/list',
                method: 'GET',
                version: 1,
                data: opt
            });
        },
        /**
         * 按条件搜索订单状态
         * @method BAAS.OrderType_searchTypes
         * @param {Object} opt 可选参数对象
         * @param {Number} opt.limit 每页数量
         * @param {Number} opt.page 页码
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        OrderType_searchTypes: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: 'basicData/orderType/search',
                method: 'POST',
                version: 1,
                data: opt
            });
        }
    });
})(window);

/**
 * Servant模块
 * @module Servant
 * @author Nie
 */
(function (root) {
    'use strict';
    var BAAS = root.BAAS = root.BAAS || {};

    /**
     * 从业人员管理
     * @class BAAS.Servant
     * @constructor
     * @param {Object} opt 参数对象
     * @param {String} opt.address 现住址
     * @param {String} opt.birthday 出生日期
     * @param {Array} opt.cers 证书
     * @param {String} opt.cerphoto 证书图片
     * @param {String} opt.certificate 职业证书
     * @param {String} opt.company_code 归属公司code
     * @param {String} opt.company_name 归属公司名称
     * @param {Array} opt.employ_company 雇佣公司
     * @param {String} opt.health_number 健康证号码
     * @param {String} opt.identify 身份证号
     * @param {Array} opt.jobs 求职意向
     * @param {String} opt.name 姓名
     * @param {String} opt.nativePlace 籍贯
     * @param {Number} opt.order_num 订单数
     * @param {String} opt.photo 照片
     * @param {String} opt.record_manager_account 管理者用户
     * @param {String} opt.record_manager_group_id 管理者组id
     * @param {String} opt.record_manager_id 管理者id
     * @param {String} opt.reasons 离职原因
     * @param {String} opt.servant_id 人员id
     * @param {String} opt.servantstatus 人员状态
     * @param {String} opt.service 服务类型
     * @param {Array} opt.serviceType3_code 三级服务code
     * @param {Array} opt.serviceType3_title 三级服务名称
     * @param {String} opt.sex 性别
     * @param {Array} opt.technique 技能
     * @param {String} opt.telephone 联系电话
     * @param {Number} opt.time_length 持续时间
     * @param {String} opt.verifystatus 审核状态
     * @param {String} opt.wechat_qy_account 微信企业号
     * @param {String} opt.work_number 上岗合格证号
     * @param {String} opt.work_time 工作时间
     * @param {String} opt.yikatong_number 一卡通号码
     */
    BAAS.Servant = function (opt) {
        opt = opt || {};
        
                /**
         * 用户名
         * @property account
         * @type String
         * @default ""
         */
        this.account = '';
        /**
         * 密码
         * @property password
         * @type String
         * @default ""
         */
        this.password = '';
        
        /**
         * 现住址
         * @property address
         * @type String
         * @default ""
         */
        this.address = opt.address || '';
        /**
         * 出生日期
         * @property birthday
         * @type String
         * @default ""
         */
        this.birthday = opt.birthday || '';
        /**
         * 证书
         * @property cers
         * @type Array
         * @default []
         */
        this.cers = opt.cers || [];
        /**
         * 证书图片
         * @property cerphoto
         * @type String
         * @default ""
         */
        this.cerphoto = opt.cerphoto || '';
        /**
         * 职业证书
         * @property certificate
         * @type String
         * @default ""
         */
        this.certificate = opt.certificate || '';
        /**
         * 归属公司code
         * @property company_code
         * @type String
         * @default ""
         */
        this.company_code = opt.company_code || '';
        /**
         * 归属公司名称
         * @property company_name
         * @type String
         * @default ""
         */
        this.company_name = opt.company_name || '';
        /**
         * 雇佣公司
         * @property employ_company
         * @type Array
         * @default []
         */
        this.employ_company = opt.employ_company || [];
        /**
         * 健康证号码
         * @property health_number
         * @type String
         * @default ""
         */
        this.health_number = opt.health_number || '';
        /**
         * 身份证号
         * @property identify
         * @type String
         * @default ""
         */
        this.identify = opt.identify || '';
        /**
         * 求职意向
         * @property jobs
         * @type Array
         * @default []
         */
        this.jobs = opt.jobs || [];
        /**
         * 姓名
         * @property name
         * @type String
         * @default ""
         */
        this.name = opt.name || '';
        /**
         * 籍贯
         * @property nativePlace
         * @type String
         * @default ""
         */
        this.nativePlace = opt.nativePlace || '';
        /**
         * 订单数
         * @property order_num
         * @type Number
         * @default 0
         */
        this.order_num = opt.order_num || 0;
        /**
         * 照片
         * @property photo
         * @type String
         * @default ""
         */
        this.photo = opt.photo || '';
        /**
         * 管理者用户
         * @property record_manager_account
         * @type String
         * @default ""
         */
        this.record_manager_account = opt.record_manager_account || '';
        /**
         * 管理者组id
         * @property record_manager_group_id
         * @type String
         * @default ""
         */
        this.record_manager_group_id = opt.record_manager_group_id || '';
        /**
         * 管理者id
         * @property record_manager_id
         * @type String
         * @default ""
         */
        this.record_manager_id = opt.record_manager_id || '';
        /**
         * 离职原因
         * @property reasons
         * @type String
         * @default ""
         */
        this.reasons = opt.reasons || '';
        /**
         * 人员id
         * @property servant_id
         * @type String
         * @default ""
         */
        this.servant_id = opt.servant_id || '';
        /**
         * 人员状态
         * @property servantstatus
         * @type String
         * @default ""
         */
        this.servantstatus = opt.servantstatus || '';
        /**
         * 服务类型
         * @property service
         * @type String
         * @default ""
         */
        this.service = opt.service || '';
        /**
         * 三级服务code
         * @property serviceType3_code
         * @type Array
         * @default []
         */
        this.serviceType3_code = opt.serviceType3_code || [];
        /**
         * 三级服务名称
         * @property serviceType3_title
         * @type Array
         * @default []
         */
        this.serviceType3_title = opt.serviceType3_title || [];
        /**
         * 性别
         * @property sex
         * @type String
         * @default ""
         */
        this.sex = opt.sex || '';
        /**
         * 技能
         * @property technique
         * @type Array
         * @default []
         */
        this.technique = opt.technique || [];
        /**
         * 联系电话
         * @property telephone
         * @type String
         * @default ""
         */
        this.telephone = opt.telephone || '';
        /**
         * 持续时间
         * @property time_length
         * @type Number
         * @default 0
         */
        this.time_length = opt.time_length || 0;
        /**
         * 审核状态
         * @property verifystatus
         * @type String
         * @default ""
         */
        this.verifystatus = opt.verifystatus || '';
        /**
         * 微信企业号
         * @property wechat_qy_account
         * @type String
         * @default ""
         */
        this.wechat_qy_account = opt.wechat_qy_account || '';
        /**
         * 上岗合格证号
         * @property work_number
         * @type String
         * @default ""
         */
        this.work_number = opt.work_number || '';
        /**
         * 工作时间
         * @property work_time
         * @type String
         * @default ""
         */
        this.work_time = opt.work_time || '';
        /**
         * 一卡通号码
         * @property yikatong_number
         * @type String
         * @default ""
         */
        this.yikatong_number = opt.yikatong_number || '';
    };
    BAAS._extend(BAAS.Servant, {
        /**
         * 是否是BAAS.Servant实例
         * @method is
         * @param {Object} val 待测对象
         * @return {Boolean} true|false
         * @static
         */
        is: function (val) {
            return BAAS._isObject(val) && !BAAS._isUndefined(val.name)
                && !BAAS._isUndefined(val.sex) && !BAAS._isUndefined(val.servant_id)
                && !BAAS._isUndefined(val.servantstatus) && !BAAS._isUndefined(val.address)
                && !BAAS._isUndefined(val.birthday) && !BAAS._isUndefined(val.telephone);
        }
    });
    BAAS._extend(BAAS.Servant.prototype, {
        Servant: BAAS.Servant,
        /**
         * setter方法
         * @method set
         * @param {String} key 实例属性名
         * @param {*} value 实例属性值
         * @return {Boolean} 是否成功
         */
        set: function (key, value) {
            return !!key && (this[key] = value);
        },
        /**
         * getter方法
         * @method get
         * @param {String} key 实例属性名
         * @return {*} 实例属性值或false
         */
        get: function (key) {
            return !!key && this[key];
        }
    });

    BAAS._extend(BAAS._App.prototype, {
        Servant: BAAS.Servant,
        /**
         * 返回服务人员信息
         * @method BAAS.Servant_information
         * @param {Object} obj BAAS.SalesOrder 实例
         * @param opt.id 指服务人员id
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Servant_information: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: "servant/servant/find/"+opt.servant_id,
                method: "GET",
                data: opt
            })
        },
        /**
         * 返回服务人员业绩
         * @method BAAS.Servant_achievement
         * @param {Object} obj BAAS.SalesOrder 实例
         * @param opt.id 指服务人员id
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Servant_achievement: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: "servant/performance/find/"+opt.id,
                method: "GET",
                data: opt
            })
        },
        /**
         * 用户登录
         * @method BAAS.Servant_login
         * @param {Object} obj BAAS.Servant实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Servant_login: function (obj) {
            var _this = this;
            if (!BAAS.Servant.is(obj)) {
                throw new Error('参数类型错误！');
            }
            return _this._request({
                uri: 'servant/servant/login',
                method: 'POST',
                data: obj
            }).success(function (obj) {
                if (obj && obj.status) {
                    BAAS._setItem(_this._path('ts'), obj.result.ts);
                    BAAS._setItem(_this._path('manager'), obj);
                }
            });
        },
        /**
         * 用户登出
         * @method BAAS.Servant_logout
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Servant_logout: function () {
            var _this = this;
            return _this._request({
                uri: 'manager/manager/logout',
                method: 'POST'
            }).success(function (obj) {
                if (obj && obj.login === 'guest') {
                    BAAS._removeItem(_this._path('ts'));
                    BAAS._removeItem(_this._path('manager'));
                }
            });
        },
        /**
         * 检查当前登录用户
         * @method BAAS.User_checkLogin
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Servant_checkLogin: function () {
            var _this = this;
            return _this._request({
                uri: 'manager/t31manager/checkLogin',
                method: 'GET'
            }).success(function (obj) {
                if (obj && obj.login === 'logged') {
                    BAAS._setItem(_this._path('manager'), obj);
                }
            });
        },
        /**
         * 获取服务人员服务统计
         * @method BAAS.Servant_service_statistics
         * @opt.user_info 服务人员id
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Servant_service_statistics: function (opt) {
            var _this = this;
            return _this._request({
                uri: 'order/order/count/servant/'+opt.user_info,
                method: 'POST'
            })
        },
        /**
         * 获取服务人员走过的地方(数量)
         * @method BAAS.Servant_over_the_place
         * @opt.user_info 服务人员id
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Servant_over_the_place: function (opt) {
            var _this = this;
            return _this._request({
                uri: 'servant/location/'+opt.user_info+"/number",
                method: 'POST'
            })
        },
        /**
         * 获取服务人员走过的地方(详情)
         * @method BAAS.Servant_over_the_place_details
         * @opt.user_info 服务人员id
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Servant_over_the_place_details: function (opt) {
            var _this = this;
            return _this._request({
                uri: 'servant/location/'+opt.user_info,
                method: 'GET'
            })
        },
        /**
         * 获取当前用户信息
         * @method BAAS.User_getCurrent
         * @return {Object} 当前用户信息
         * @static
         */
        Servant_getCurrent: function () {
            var _this = this;
            var manager = BAAS._getItem(_this._path('manager')) || {};
            return {
                manager_id: manager.manager_id,
                group_id: manager.group_id,
                manager_account: manager.manager_account,
                type_code: manager.type_code,
                company_filter_type: manager.company_filter_type,
                user_id: manager.user_id,
                company_code: manager.company_code,
                company_name: manager.company_name,
                moduleList: manager.moduleList,
                managerGroup: manager.managerGroup
            };
        },
        /**
         * 获取从业人员
         * @method BAAS.Servant_getServant
         * @param {String} id 人员id
         * @param {Object} opt 可选参数对象
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Servant_getServant: function (id, opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: 'servant/servant/servant_id/' + id,
                method: 'GET',
                data: opt
            });
        },
        /**
         * 保存从业人员
         * @method BAAS.Servant_saveServant
         * @param {Object} obj BAAS.Servant实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Servant_saveServant: function (obj) {
            var _this = this;
            if (!BAAS.Servant.is(obj)) {
                throw new Error('参数类型错误！');
            }
            var id = obj.servant_id || 0;
            obj._id = undefined;
            return _this._request({
                uri: 'servant/servant/edit/' + id,
                method: 'POST',
                version: 1,
                data: obj
            });
        },
        /**
         * 删除从业人员
         * @method BAAS.Servant_deleteServant
         * @param {Object} obj BAAS.Servant实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Servant_deleteServant: function (obj) {
            var _this = this;
            if (!BAAS.Servant.is(obj)) {
                throw new Error('参数类型错误！');
            }
            var id = obj.servant_id || 0;
            return _this._request({
                uri: 'servant/servant/delete/' + id,
                method: 'GET',
                version: 1
            });
        },
        /**
         * 批量导入从业人员
         * @method BAAS.Servant_importServants
         * @param {Object} str excel路径
         * @param {Object} opt 可选参数对象
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Servant_importServants: function (str, opt) {
            var _this = this;
            opt = opt || {};
            opt.path = str || '';
            return _this._request({
                uri: 'servant/servant/import',
                method: 'POST',
                version: 1,
                data: opt
            });
        },

        /**
         * 获取从业人员列表
         * @method BAAS.Servant_listServants
         * @param {Object} opt 可选参数对象
         * @param {Number} opt.limit 每页数量
         * @param {Number} opt.page 页码
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Servant_listServants: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: 'servant/servant/list',
                method: 'GET',
                version: 1,
                data: opt
            });
        },
        /**
         * 按条件搜索服务商
         * @method BAAS.Servant_searchServants
         * @param {Object} opt 可选参数对象
         * @param {Number} opt.limit 每页数量
         * @param {Number} opt.page 页码
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Servant_searchServants: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: 'servant/servant/search',
                method: 'POST',
                version: 1,
                data: opt
            });
        },

        /**
         * 上传excel文件
         * @method BAAS.Servant_uploadFile
         * @param {Object} file FormData对象
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Servant_uploadFile: function (file) {
            var _this = this;
            return _this._request({
                uri: 'servant/servant/uploadFile',
                method: 'POST',
                version: 1,
                file: file || ''
            });
        },
        /**
         * 上传图片
         * @method BAAS.Servant_upload
         * @param {Object} file FormData对象
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Servant_upload: function (file) {
            var _this = this;
            return _this._request({
                uri: 'servant/servant/upload',
                method: 'POST',
                version: 1,
                file: file || ''
            });
        }
    });
})(window);

(function (root) {
    'use strict';
    var BAAS = root.BAAS = root.BAAS || {};

    /**
     * 从业人员证书管理
     * @class BAAS.ServantCert
     * @constructor
     * @param {Object} opt 参数对象
     * @param {String} opt.name 证书名称
     * @param {String} opt.description 证书描述
     */
    BAAS.ServantCert = function (opt) {
        opt = opt || {};
        /**
         * 证书名称
         * @property name
         * @type String
         * @default ""
         */
        this.name = opt.name || '';
        /**
         * 证书描述
         * @property description
         * @type String
         * @default ""
         */
        this.description = opt.description || '';
    };
    BAAS._extend(BAAS.ServantCert, {
        /**
         * 是否是BAAS.ServantCert实例
         * @method is
         * @param {Object} val 待测对象
         * @return {Boolean} true|false
         * @static
         */
        is: function (val) {
            return BAAS._isObject(val) && !BAAS._isUndefined(val.name)
                && !BAAS._isUndefined(val.description);
        }
    });
    BAAS._extend(BAAS.ServantCert.prototype, {
        /**
         * setter方法
         * @method set
         * @param {String} key 实例属性名
         * @param {*} value 实例属性值
         * @return {Boolean} 是否成功
         */
        set: function (key, value) {
            return !!key && (this[key] = value);
        },
        /**
         * getter方法
         * @method get
         * @param {String} key 实例属性名
         * @return {*} 实例属性值或false
         */
        get: function (key) {
            return !!key && this[key];
        }
    });

    BAAS._extend(BAAS._App.prototype, {
        ServantCert: BAAS.ServantCert,

        /**
         * 获取从业人员证书
         * @method BAAS.ServantCert_getCert
         * @param {String} id 证书id
         * @param {Object} opt 可选参数对象
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        ServantCert_getCert: function (id, opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: 'servant/certificate/cer_id/' + id,
                method: 'GET',
                data: opt
            });
        },
        /**
         * 保存从业人员证书
         * @method BAAS.ServantCert_saveCert
         * @param {Object} obj BAAS.ServantCert实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        ServantCert_saveCert: function (obj) {
            var _this = this;
            if (!BAAS.ServantCert.is(obj)) {
                throw new Error('参数类型错误！');
            }
            var id = obj._id ? obj._id.$id || 0 : 0;
            obj._id = undefined;
            return _this._request({
                uri: 'servant/certificate/edit/' + id,
                method: 'POST',
                data: obj
            });
        },
        /**
         * 删除从业人员证书
         * @method BAAS.ServantCert_deleteCert
         * @param {Object} obj BAAS.ServantCert实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        ServantCert_deleteCert: function (obj) {
            var _this = this;
            if (!BAAS.ServantCert.is(obj)) {
                throw new Error('参数类型错误！');
            }
            var id = obj._id ? obj._id.$id || 0 : 0;
            return _this._request({
                uri: 'servant/certificate/delete/' + id,
                method: 'GET'
            });
        },
        /**
         * 获取从业人员证书列表
         * @method BAAS.ServantCert_listCerts
         * @param {Object} opt 可选参数对象
         * @param {Number} opt.limit 每页数量
         * @param {Number} opt.page 页码
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        ServantCert_listCerts: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: 'servant/certificate/list',
                method: 'GET',
                data: opt
            });
        }
    });
})(window);

(function (root) {
    'use strict';
    var BAAS = root.BAAS = root.BAAS || {};
    /**
     * 从业人员职业管理
     * @class BAAS.ServantJob
     * @constructor
     * @param {Object} opt 参数对象
     * @param {String} opt.name 职业名称
     * @param {String} opt.description 职业描述
     */
    BAAS.ServantJob = function (opt) {
        opt = opt || {};
        /**
         * 职业名称
         * @property name
         * @type String
         * @default ""
         */
        this.name = opt.name || '';
        /**
         * 职业描述
         * @property description
         * @type String
         * @default ""
         */
        this.description = opt.description || '';
    };
    BAAS._extend(BAAS.ServantJob, {
        /**
         * 是否是BAAS.ServantJob实例
         * @method is
         * @param {Object} val 待测对象
         * @return {Boolean} true|false
         * @static
         */
        is: function (val) {
            return BAAS._isObject(val) && !BAAS._isUndefined(val.name)
                && !BAAS._isUndefined(val.description);
        }
    });
    BAAS._extend(BAAS.ServantJob.prototype, {
        /**
         * setter方法
         * @method set
         * @param {String} key 实例属性名
         * @param {*} value 实例属性值
         * @return {Boolean} 是否成功
         */
        set: function (key, value) {
            return !!key && (this[key] = value);
        },
        /**
         * getter方法
         * @method get
         * @param {String} key 实例属性名
         * @return {*} 实例属性值或false
         */
        get: function (key) {
            return !!key && this[key];
        }
    });

    BAAS._extend(BAAS._App.prototype, {
        ServantJob: BAAS.ServantJob,

        /**
         * 获取从业人员职业
         * @method BAAS.ServantJob_getJob
         * @param {String} id 职业id
         * @param {Object} opt 可选参数对象
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        ServantJob_getJob: function (id, opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: 'servant/job/job_id/' + id,
                method: 'GET',
                data: opt
            });
        },
        /**
         * 保存从业人员职业
         * @method BAAS.ServantJob_saveJob
         * @param {Object} obj BAAS.ServantJob实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        ServantJob_saveJob: function (obj) {
            var _this = this;
            if (!BAAS.ServantJob.is(obj)) {
                throw new Error('参数类型错误！');
            }
            var id = obj._id ? obj._id.$id || 0 : 0;
            obj._id = undefined;
            return _this._request({
                uri: 'servant/job/edit/' + id,
                method: 'POST',
                data: obj
            });
        },
        /**
         * 删除从业人员职业
         * @method BAAS.ServantJob_deleteJob
         * @param {Object} obj BAAS.ServantJob实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        ServantJob_deleteJob: function (obj) {
            var _this = this;
            if (!BAAS.ServantJob.is(obj)) {
                throw new Error('参数类型错误！');
            }
            var id = obj._id ? obj._id.$id || 0 : 0;
            return _this._request({
                uri: 'servant/job/delete/' + id,
                method: 'GET'
            });
        },
        /**
         * 获取从业人员职业列表
         * @method BAAS.ServantJob_listJobs
         * @param {Object} opt 可选参数对象
         * @param {Number} opt.limit 每页数量
         * @param {Number} opt.page 页码
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        ServantJob_listJobs: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: 'servant/job/list',
                method: 'GET',
                data: opt
            });
        }
    });
})(window);

(function (root) {
    'use strict';
    var BAAS = root.BAAS = root.BAAS || {};

    /**
     * 从业人员技能管理
     * @class BAAS.ServantTech
     * @constructor
     * @param {Object} opt 参数对象
     * @param {String} opt.name 技能名称
     * @param {String} opt.description 技能描述
     */
    BAAS.ServantTech = function (opt) {
        opt = opt || {};
        /**
         * 技能名称
         * @property name
         * @type String
         * @default ""
         */
        this.name = opt.name || '';
        /**
         * 技能描述
         * @property description
         * @type String
         * @default ""
         */
        this.description = opt.description || '';
    };
    BAAS._extend(BAAS.ServantTech, {
        /**
         * 是否是BAAS.ServantTech实例
         * @method is
         * @param {Object} val 待测对象
         * @return {Boolean} true|false
         * @static
         */
        is: function (val) {
            return BAAS._isObject(val) && !BAAS._isUndefined(val.name)
                && !BAAS._isUndefined(val.description);
        }
    });
    BAAS._extend(BAAS.ServantTech.prototype, {
        /**
         * setter方法
         * @method set
         * @param {String} key 实例属性名
         * @param {*} value 实例属性值
         * @return {Boolean} 是否成功
         */
        set: function (key, value) {
            return !!key && (this[key] = value);
        },
        /**
         * getter方法
         * @method get
         * @param {String} key 实例属性名
         * @return {*} 实例属性值或false
         */
        get: function (key) {
            return !!key && this[key];
        }
    });

    BAAS._extend(BAAS._App.prototype, {
        ServantTech: BAAS.ServantTech,

        /**
         * 获取从业人员技能
         * @method BAAS.ServantTech_getTech
         * @param {String} id 技能id
         * @param {Object} opt 可选参数对象
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        ServantTech_getTech: function (id, opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: 'servant/technique/technique_id/' + id,
                method: 'GET',
                data: opt
            });
        },
        /**
         * 保存从业人员技能
         * @method BAAS.ServantTech_saveTech
         * @param {Object} obj BAAS.ServantTech实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        ServantTech_saveTech: function (obj) {
            var _this = this;
            if (!BAAS.ServantTech.is(obj)) {
                throw new Error('参数类型错误！');
            }
            var id = obj._id ? obj._id.$id || 0 : 0;
            obj._id = undefined;
            return _this._request({
                uri: 'servant/technique/edit/' + id,
                method: 'POST',
                data: obj
            });
        },
        /**
         * 删除从业人员技能
         * @method BAAS.ServantTech_deleteTech
         * @param {Object} obj BAAS.ServantTech实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        ServantTech_deleteTech: function (obj) {
            var _this = this;
            if (!BAAS.ServantTech.is(obj)) {
                throw new Error('参数类型错误！');
            }
            var id = obj._id ? obj._id.$id || 0 : 0;
            return _this._request({
                uri: 'servant/technique/delete/' + id,
                method: 'GET'
            });
        },
        /**
         * 获取从业人员技能列表
         * @method BAAS.ServantTech_listTechs
         * @param {Object} opt 可选参数对象
         * @param {Number} opt.limit 每页数量
         * @param {Number} opt.page 页码
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        ServantTech_listTechs: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: 'servant/technique/list',
                method: 'GET',
                data: opt
            });
        }
    });
})(window);

/**
 * Archive模块
 * @module Archive
 * @author Nie
 */
(function (root) {
    'use strict';
    var BAAS = root.BAAS = root.BAAS || {};

    /**
     * 老人档案管理
     * @class BAAS.Archive
     * @constructor
     * @param {Object} opt 参数对象
     * @param {String} opt.address 现住址
     * @param {String} opt.birthday 出生日期
     * @param {String} opt.card_number 会员卡号
     * @param {String} opt.cardid 身份证号
     * @param {String} opt.code 档案code
     * @param {String} opt.jiedao 街道code
     * @param {String} opt.name 姓名
     * @param {String} opt.phone 联系方式
     * @param {String} opt.sex 性别
     * @param {String} opt.shequ 社区code
     * @param {String} opt.xingzheng 行政区code
     * @param {String} opt.manager_id 管理者账号
     */
    BAAS.Archive = function (opt) {
        opt = opt || {};
        /**
         * 现住址
         * @property address
         * @type String
         * @default ""
         */
        this.address = opt.address || '';
        /**
         * 出生日期
         * @property birthday
         * @type String
         * @default ""
         */
        this.birthday = opt.birthday || '';
        /**
         * 会员卡号
         * @property card_number
         * @type String
         * @default ""
         */
        this.card_number = opt.card_number || '';
        /**
         * 身份证号
         * @property cardid
         * @type String
         * @default ""
         */
        this.cardid = opt.cardid || '';
        /**
         * 档案code
         * @property code
         * @type String
         * @default ""
         */
        this.code = opt.code || '';
        /**
         * 街道code
         * @property jiedao
         * @type String
         * @default ""
         */
        this.jiedao = opt.jiedao || '';
        /**
         * 姓名
         * @property name
         * @type String
         * @default ""
         */
        this.name = opt.name || '';
        /**
         * 联系方式
         * @property phone
         * @type String
         * @default ""
         */
        this.phone = opt.phone || '';
        /**
         * 性别
         * @property sex
         * @type String
         * @default ""
         */
        this.sex = opt.sex || '';
        /**
         * 社区code
         * @property shequ
         * @type String
         * @default ""
         */
        this.shequ = opt.shequ || '';
        /**
         * 行政区code
         * @property xingzheng
         * @type String
         * @default ""
         */
        this.xingzheng = opt.xingzheng || '';
        /**
         * 管理者账号
         * @property manager_id
         * @type String
         * @default undefined
         */
        this.manager_id = opt.manager_id || undefined;
    };
    BAAS._extend(BAAS.Archive, {
        /**
         * 是否是BAAS.Archive实例
         * @method is
         * @param {Object} val 待测对象
         * @return {Boolean} true|false
         * @static
         */
        is: function (val) {
            return BAAS._isObject(val) && !BAAS._isUndefined(val.name)
                && !BAAS._isUndefined(val.sex) && !BAAS._isUndefined(val.cardid)
                && !BAAS._isUndefined(val.code) && !BAAS._isUndefined(val.address)
                && !BAAS._isUndefined(val.birthday) && !BAAS._isUndefined(val.phone);
        }
    });
    BAAS._extend(BAAS.Archive.prototype, {
        /**
         * setter方法
         * @method set
         * @param {String} key 实例属性名
         * @param {*} value 实例属性值
         * @return {Boolean} 是否成功
         */
        set: function (key, value) {
            return !!key && (this[key] = value);
        },
        /**
         * getter方法
         * @method get
         * @param {String} key 实例属性名
         * @return {*} 实例属性值或false
         */
        get: function (key) {
            return !!key && this[key];
        }
    });

    BAAS._extend(BAAS._App.prototype, {
        Archive: BAAS.Archive,

        /**
         * 获取老人档案
         * @method BAAS.Archive_getArchive
         * @param {String} id 档案code
         * @param {Object} opt 可选参数对象
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Archive_getArchive: function (id, opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: 'archives/archives/code/' + id,
                method: 'GET',
                data: opt
            });
        },
        /**
         * 保存老人档案
         * @method BAAS.Archive_saveArchive
         * @param {Object} obj BAAS.Archive实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Archive_saveArchive: function (obj) {
            var _this = this;
            if (!BAAS.Archive.is(obj)) {
                throw new Error('参数类型错误！');
            }
            obj._id = undefined;
            return _this._request({
                uri: 'archives/archives/edit',
                method: 'POST',
                data: obj
            });
        },
        /**
         * 保存老人档案。允许身份证号为空；新建档案以及编辑老人状态时
         * 记录历史；更改老人姓名、电话、行政区、街道、社区、详细地址
         * 时，同步更新老人订单中的相关信息
         * @method BAAS.Archive_saveArchiveLoosely
         * @param {Object} obj BAAS.Archive实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Archive_saveArchiveLoosely: function (obj) {
            var _this = this;
            if (!BAAS.Archive.is(obj)) {
                throw new Error('参数类型错误！');
            }
            var id = obj._id || 0;
            obj._id = undefined;
            return _this._request({
                uri: 'archives/archives/edit/' + id,
                method: 'POST',
                data: obj
            });
        },
        /**
         * 删除老人档案
         * @method BAAS.Archive_deleteArchive
         * @param {Object} obj BAAS.Archive实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Archive_deleteArchive: function (obj) {
            var _this = this;
            if (!BAAS.Archive.is(obj)) {
                throw new Error('参数类型错误！');
            }
            return _this._request({
                uri: 'archives/archives/delete',
                method: 'POST',
                data: {
                    code: obj.code || ''
                }
            });
        },

        /**
         * 获取老人档案列表
         * @method BAAS.Archive_listArchives
         * @param {Object} opt 可选参数对象
         * @param {Number} opt.limit 每页数量
         * @param {Number} opt.page 页码
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Archive_listArchives: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: 'archives/archives/list',
                method: 'GET',
                data: opt
            });
        },
        /**
         * 按条件搜索老人档案
         * @method BAAS.Archive_searchArchives
         * @param {Object} opt 可选参数对象
         * @param {Number} opt.limit 每页数量
         * @param {Number} opt.page 页码
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Archive_searchArchives: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: 'archives/archives/search',
                method: 'POST',
                data: opt
            });
        },
        /**
         * 批量导入老人档案
         * @method BAAS.Archive_importArchives
         * @param {Object} str excel路径
         * @param {Object} opt 可选参数对象
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Archive_importArchives: function (str, opt) {
            var _this = this;
            opt = opt || {};
            opt.path = str || '';
            return _this._request({
                uri: 'archives/archives/import',
                method: 'POST',
                data: opt
            });
        },
        /**
         * 获取绑定会员卡的老人档案列表
         * @method BAAS.Archive_countArchives
         * @param {Object} opt 可选参数对象
         * @param {Number} opt.limit 每页数量
         * @param {Number} opt.page 页码
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Archive_countArchives: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: 'archives/archives/count',
                method: 'GET',
                data: opt
            });
        },

        /**
         * 导出老人档案列表
         * @method BAAS.Archive_exportArchives
         * @param {Object} opt 可选参数对象
         * @param {String} opt.more_status 多状态（用”|“间隔）
         * @param {String} opt.start_time 开始时间
         * @param {String} opt.end_time 结束时间
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Archive_exportArchives: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: 'archives/archives/export/list',
                method: 'GET',
                data: opt
            });
        },
        /**
         * 根据档案code导出老人档案列表
         * @method BAAS.Archive_exportArchivesWithCodes
         * @param {String} str 老人code用逗号连成的字符串
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Archive_exportArchivesWithCodes: function (str) {
            var _this = this;
            return _this._request({
                uri: 'archives/archives/list/export',
                method: 'POST',
                data: {
                    codes: str || ''
                }
            });
        },
        /**
         * 将HTML模板导出为PDF
         * @method BAAS.Archive_exportInfoToPDF
         * @param {String} str 需要导出的内容（HTML模板）
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Archive_exportInfoToPDF: function (str) {
            var _this = this;
            return _this._request({
                uri: 'archives/archives/information/export',
                method: 'GET',
                data: {
                    content: str || ''
                }
            });
        },

        /**
         * 上传excel文件
         * @method BAAS.Archive_uploadFile
         * @param {Object} file FormData对象
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Archive_uploadFile: function (file) {
            var _this = this;
            return _this._request({
                uri: 'archives/archives/uploadFile',
                method: 'POST',
                file: file || ''
            });
        },
        /**
         * 上传图片
         * @method BAAS.Archive_upload
         * @param {Object} file FormData对象
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Archive_upload: function (file) {
            var _this = this;
            return _this._request({
                uri: 'archives/archives/upload',
                method: 'POST',
                file: file || ''
            });
        },

        /**
         * 获取老人会员卡信息
         * @method BAAS.Archive_getCardInfo
         * @param {String} str 会员卡卡号
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Archive_getCardInfo: function (str) {
            var _this = this;
            return _this._request({
                uri: 'archives/archives/getArchivesCardInfo',
                method: 'POST',
                data: {
                    card_number: str || ''
                }
            });
        },
        /**
         * 通过会员卡卡号查找到老人档案，然后把手机号添加到该老人的档案中
         * @method BAAS.Archive_bindPhoneToArchive
         * @param {String} str1 会员卡卡号
         * @param {String} str2 手机号
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Archive_bindPhoneToArchive: function (str1, str2) {
            var _this = this;
            return _this._request({
                uri: 'archives/archives/bind/' + str1 + '/phone/' + str2,
                method: 'POST'
            });
        },
        /**
         * 获取档案更改历史记录列表
         * @method BAAS.Archive_searchHistories
         * @param {Object} opt 可选参数对象
         * @param {String} opt.start_time 开始时间
         * @param {String} opt.end_time 结束时间
         * @param {Number} opt.limit 每页数量
         * @param {Number} opt.page 页码
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Archive_searchHistories: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: 'archives/archives/search/history/list',
                method: 'GET',
                data: opt
            });
        }
    });
})(window);

(function (root) {
    'use strict';
    var BAAS = root.BAAS = root.BAAS || {};

    /**
     * 老人轨迹数据管理
     * @class BAAS.ArchiveTrack
     * @constructor
     * @param {Object} opt 参数对象
     * @param {String} opt.cardid 身份证号
     * @param {String} opt.longitude 经度
     * @param {String} opt.latitude 纬度
     */
    BAAS.ArchiveTrack = function (opt) {
        opt = opt || {};
        /**
         * 身份证号
         * @property cardid
         * @type String
         * @default ""
         */
        this.cardid = opt.cardid || '';
        /**
         * 经度
         * @property longitude
         * @type String
         * @default ""
         */
        this.longitude = opt.longitude || '';
        /**
         * 纬度
         * @property latitude
         * @type String
         * @default ""
         */
        this.latitude = opt.latitude || '';
    };
    BAAS._extend(BAAS.ArchiveTrack, {
        /**
         * 是否是BAAS.ArchiveTrack实例
         * @method is
         * @param {Object} val 待测对象
         * @return {Boolean} true|false
         * @static
         */
        is: function (val) {
            return BAAS._isObject(val) && !BAAS._isUndefined(val.cardid)
                && !BAAS._isUndefined(val.longitude) && !BAAS._isUndefined(val.latitude);
        }
    });
    BAAS._extend(BAAS.ArchiveTrack.prototype, {
        /**
         * setter方法
         * @method set
         * @param {String} key 实例属性名
         * @param {*} value 实例属性值
         * @return {Boolean} 是否成功
         */
        set: function (key, value) {
            return !!key && (this[key] = value);
        },
        /**
         * getter方法
         * @method get
         * @param {String} key 实例属性名
         * @return {*} 实例属性值或false
         */
        get: function (key) {
            return !!key && this[key];
        }
    });

    BAAS._extend(BAAS._App.prototype, {
        ArchiveTrack: BAAS.ArchiveTrack,

        /**
         * 获取老人轨迹数据列表
         * @method BAAS.ArchiveTrack_listTracks
         * @param {Object} opt 可选参数对象
         * @param {String} opt.start_time 开始时间
         * @param {String} opt.end_time 结束时间
         * @param {String} opt.cardid 身份证号
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        ArchiveTrack_listTracks: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: 'archives/archives/search/track/data',
                method: 'GET',
                data: opt
            });
        },
        /**
         * 添加老人轨迹数据
         * @method BAAS.ArchiveTrack_saveTrack
         * @param {Object} obj BAAS.ArchiveTrack实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        ArchiveTrack_saveTrack: function (obj) {
            var _this = this;
            if (!BAAS.ArchiveTrack.is(obj)) {
                throw new Error('参数类型错误！');
            }
            obj._id = undefined;
            return _this._request({
                uri: 'archives/archives/add/track/data',
                method: 'POST',
                data: obj
            });
        }
    });
})(window);

(function (root) {
    'use strict';
    var BAAS = root.BAAS = root.BAAS || {};

    /**
     * 老人图像信息管理
     * @class BAAS.ArchiveImage
     * @constructor
     * @param {Object} opt 参数对象
     * @param {String} opt.url 图片路径
     * @param {String} opt.description 图片描述
     * @param {String} opt.archive_code 档案code
     */
    BAAS.ArchiveImage = function (opt) {
        opt = opt || {};
        /**
         * 图片路径
         * @property url
         * @type String
         * @default ""
         */
        this.url = opt.url || '';
        /**
         * 图片描述
         * @property description
         * @type String
         * @default ""
         */
        this.description = opt.description || '';
        /**
         * 档案code
         * @property archive_code
         * @type String
         * @default ""
         */
        this.archive_code = opt.archive_code || '';
    };
    BAAS._extend(BAAS.ArchiveImage, {
        /**
         * 是否是BAAS.ArchiveImage实例
         * @method is
         * @param {Object} val 待测对象
         * @return {Boolean} true|false
         * @static
         */
        is: function (val) {
            return BAAS._isObject(val) && !BAAS._isUndefined(val.url)
                && !BAAS._isUndefined(val.description) && !BAAS._isUndefined(val.archive_code);
        }
    });
    BAAS._extend(BAAS.ArchiveImage.prototype, {
        /**
         * setter方法
         * @method set
         * @param {String} key 实例属性名
         * @param {*} value 实例属性值
         * @return {Boolean} 是否成功
         */
        set: function (key, value) {
            return !!key && (this[key] = value);
        },
        /**
         * getter方法
         * @method get
         * @param {String} key 实例属性名
         * @return {*} 实例属性值或false
         */
        get: function (key) {
            return !!key && this[key];
        }
    });

    BAAS._extend(BAAS._App.prototype, {
        ArchiveImage: BAAS.ArchiveImage,

        /**
         * 获取老人图像列表
         * @method BAAS.ArchiveImage_listImages
         * @param {Object} opt 可选参数对象
         * @param {Number} opt.limit 每页数量
         * @param {Number} opt.page 页码
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        ArchiveImage_listImages: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: 'archives/archives/image/search',
                method: 'GET',
                data: opt
            });
        },
        /**
         * 保存老人图像
         * @method BAAS.ArchiveImage_saveImage
         * @param {String} id 档案code
         * @param {Object} obj BAAS.ArchiveImage实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        ArchiveImage_saveImage: function (id, obj) {
            var _this = this;
            if (!BAAS.ArchiveImage.is(obj)) {
                throw new Error('参数类型错误！');
            }
            var _id = obj._id ? obj._id.$id || 0 : 0;
            obj._id = undefined;
            return _this._request({
                uri: 'archives/archives/image/add/' + id + '/' + _id,
                method: 'POST',
                data: obj
            });
        },
        /**
         * 删除老人图像
         * @method BAAS.ArchiveImage_deleteImage
         * @param {Object} obj BAAS.ArchiveImage实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        ArchiveImage_deleteImage: function (obj) {
            var _this = this;
            if (!BAAS.ArchiveImage.is(obj)) {
                throw new Error('参数类型错误！');
            }
            var id = obj._id ? obj._id.$id || 0 : 0;
            return _this._request({
                uri: 'archives/archives/image/delete/' + id,
                method: 'GET'
            });
        }
    });
})(window);

/**
 * 业务订单
 */
(function (root) {
    "use strict";
    var BAAS = root.BAAS = root.BAAS || {};
    /**
     * @class BAAS.SalesOrder
     * @constructor
     * @param {Object} opt 参数对象
     * @param {ObjectId} opt._id 主键
     * @param {String} opt.salesOrder_id 订单号
     * @param {String} opt.name 用户姓名
     * @param {String} opt.sex 性别
     * @param {String} opt.phone 电话
     * @param {String} opt.address 地址
     * @param {String} opt.serviceType1_title 服务类型(大) 名称
     * @param {String} opt.serviceType1_code 服务类型(大) 编码
     * @param {String} opt.serviceType2_title 服务类型(中) 名称
     * @param {String} opt.serviceType2_code 服务类型(中) 编码
     * @param {String} opt.serviceType3_title 服务类型(小) 名称
     * @param {String} opt.serviceType3_code 服务类型(小) 编码
     * @param {String} opt.record_manager_id 记录者ID
     * @param {String} opt.record_manager_account 记录者昵称
     * @param {String} opt.status 状态
     * @param {String} opt.service_time 服务时间
     * @param {String} opt.create_time 下单时间
     * @param {String} opt.create_date 下单日期
     * @param {String} opt.remarks 备注
     */
    BAAS.SalesOrder = function (opt) {
        opt = opt || {};
        /**
         * 主键
         * @property _id
         * @type ObjectId
         * @default ""
         */
        this._id = opt._id || "";
        /**
         * 订单号
         * @property salesOrder_id
         * @type String
         * @default ""
         */
        this.salesOrder_id = opt.salesOrder_id || "";
        /**
         * 用户姓名
         * @property name
         * @type String
         * @default ""
         */
        this.name = opt.name || "";
        /**
         * 性别
         * @property sex
         * @type String
         * @default ""
         */
        this.sex = opt.sex || "";
        /**
         * 电话
         * @property phone
         * @type String
         * @default ""
         */
        this.phone = opt.phone || "";
        /**
         * 地址
         * @property address
         * @type String
         * @default ""
         */
        this.address = opt.address || "";
        /**
         * 服务类型(大) 名称
         * @property serviceType1_title
         * @type String
         * @default ""
         */
        this.serviceType1_title = opt.serviceType1_title || "";
        /**
         * 服务类型(大) 编码
         * @property serviceType1_code
         * @type String
         * @default ""
         */
        this.serviceType1_code = opt.serviceType1_code || "";
        /**
         * 服务类型(中) 名称
         * @property serviceType2_title
         * @type String
         * @default ""
         */
        this.serviceType2_title = opt.serviceType2_title || "";
        /**
         * 服务类型(中) 编码
         * @property serviceType2_code
         * @type String
         * @default ""
         */
        this.serviceType2_code = opt.serviceType2_code || "";
        /**
         * 服务类型(小) 名称
         * @property serviceType3_title
         * @type String
         * @default ""
         */
        this.serviceType3_title = opt.serviceType3_title || "";
        /**
         * 服务类型(小) 编码
         * @property serviceType3_code
         * @type String
         * @default ""
         */
        this.serviceType3_code = opt.serviceType3_code || "";
        /**
         * 记录者ID
         * @property record_manager_id
         * @type String
         * @default ""
         */
        this.record_manager_id = opt.record_manager_id || "";
        /**
         * 记录者昵称
         * @property record_manager_account
         * @type String
         * @default ""
         */
        this.record_manager_account = opt.record_manager_account || "";
        /**
         * 状态
         * @property status
         * @type String
         * @default ""
         */
        this.status = opt.status || "";
        /**
         * 服务时间
         * @property service_time
         * @type String
         * @default ""
         */
        this.service_time = opt.service_time || "";
        /**
         * 下单时间
         * @property create_time
         * @type String
         * @default ""
         */
        this.create_time = opt.create_time || "";
        /**
         * 下单日期
         * @property create_date
         * @type String
         * @default ""
         */
        this.create_date = opt.create_date || "";
        /**
         * 备注
         * @property remarks
         * @type String
         * @default ""
         */
        this.remarks = opt.remarks || "";
    },
    //封装set get方法
    BAAS._extend(BAAS.SalesOrder.prototype,{
        /**
         * setter方法
         * @method set
         * @param {String} key 实例属性名
         * @param {*} value 实例属性值
         * @return {Boolean} 是否成功
         */
        set: function (key, value) {
            return !!key && (this[key] = value);
        },
        /**
         * getter方法
         * @method get
         * @param {String} key 实例属性名
         * @return {*} 实例属性值或false
         */
        get: function (key) {
            return !!key && this[key];
        },
        setService_type:function(_id){
            return this.set("_id", _id);
        },
        getService_type: function () {
            return this.get("_id");
        },
        setService_code:function(salesOrder_id){
            return this.set("salesOrder_id", salesOrder_id);
        },
        getService_code: function () {
            return this.get("salesOrder_id");
        },
        setName:function(name){
            return this.set("name", name);
        },
        getName: function () {
            return this.get("name");
        },
        setSex:function(sex){
            return this.set("sex", sex);
        },
        getSex: function () {
            return this.get("sex");
        },
        setPhone:function(phone){
            return this.set("phone", phone);
        },
        getPhone: function () {
            return this.get("phone");
        },
        setAddress:function(address){
            return this.set("address",address);
        },
        getAddress:function(){
            return this.get("address");
        },
        setServiceType1_title:function(serviceType1_title){
            return this.set("serviceType1_title", serviceType1_title);
        },
        getServiceType1_title: function () {
            return this.get("serviceType1_title");
        },

        setServiceType1_code:function(serviceType1_code){
            return this.set("serviceType1_code", serviceType1_code);
        },
        getServiceType1_code: function () {
            return this.get("serviceType1_code");
        },
        setServiceType2_title:function(serviceType2_title){
            return this.set("serviceType2_title", serviceType2_title);
        },
        getServiceType2_title: function () {
            return this.get("serviceType2_title");
        },
        setServiceType2_code:function(serviceType2_code){
            return this.set("serviceType2_code", serviceType2_code);
        },
        getServiceType2_code: function () {
            return this.get("serviceType2_code");
        },
        setServiceType3_title:function(serviceType3_title){
            return this.set("serviceType3_title", serviceType3_title);
        },
        getServiceType3_title: function () {
            return this.get("serviceType3_title");
        },
        setServiceType3_code:function(serviceType3_code){
            return this.set("serviceType3_code", serviceType3_code);
        },
        getServiceType3_code: function () {
            return this.get("serviceType3_code");
        },
        setRecord_manager_id:function(record_manager_id){
            return this.set("record_manager_id", record_manager_id);
        },
        getRecord_manager_id: function () {
            return this.get("record_manager_id");
        },
        setRecord_manager_account:function(record_manager_account){
            return this.set("record_manager_account", record_manager_account);
        },
        getRecord_manager_account: function () {
            return this.get("record_manager_account");
        },
        setStatus:function(status){
            return this.set("status", status);
        },
        getStatus: function () {
            return this.get("status");
        },
        setService_time:function(service_time){
            return this.set("service_time", service_time);
        },
        getService_time: function () {
            return this.get("service_time");
        },
        setCreate_time:function(create_time){
            return this.set("create_time", create_time);
        },
        getCreate_time: function () {
            return this.get("create_time");
        },
        setCreate_date:function(create_date){
            return this.set("create_date", create_date);
        },
        getCreate_date: function () {
            return this.get("create_date");
        },
        setRemarks:function(remarks){
            return this.set("remarks", remarks);
        },
        getRemarks: function () {
            return this.get("remarks");
        },
    }),

    BAAS._extend(BAAS._App.prototype, {
        Order: BAAS.Order,
        /**
         * 返回指定状态订单列表（根据订单状态码请求相应状态订单,已接订单、服务中订单、完成服务订单）
         * @method BAAS.Order_list
         * @param {Object} obj BAAS.Order 实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Order_list: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: "order/order/search",
                method: "POST",
                data: opt
            })
        },
        /**
         * 返回全部订单列表（包括已接订单、服务中订单、完成服务订单）
         * @method BAAS.Order_list_all
         * @param {Object} obj BAAS.Order 实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Order_list_all: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: "order/order/fuzzysearch",
                method: "POST",
                data: opt
            })
        },
        
        /**
         * 根据业务订单号获取该业务订单的详细信息
         * @method BAAS.order_details
         * @param {Object} obj BAAS.SalesOrder 实例
         * @opt.order_id 订单id
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        order_details: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: "order/order/find/"+opt.order_id,
                method: "GET",
                data: opt
            })
        },
        /**
         *统计服务时长
         * @method BAAS.total_time
         * @param {Object} obj BAAS.SalesOrder 实例
         * @opt.order_id 订单id
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        total_time: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: "servant/location/duration/count",
                method: "GET",
                data: opt
            })
        },
        /**
         * 根据业务订单号获取该业务订单的服务历史/订单追踪
         * @method BAAS.Order_track
         * @param {Object} obj BAAS.SalesOrder 实例
         * @opt.order_id 订单id
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Order_track: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: "order/history/search",
                method: "POST",
                data: opt
            })
        },
        /**
         * 搜索订单
         * @method BAAS.order_search
         * @param {Object} obj BAAS.SalesOrder 实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        order_search: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: "salesOrder/salesOrder/search",
                method: "POST",
                
                data: opt
            })
        },
        /**
         * 添加业务订单
         * @method BAAS.SalesOrder_addOrder
         * @param {Object} obj BAAS.SalesOrder 实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        SalesOrder_addOrder: function (saleOrder) {
            var _this = this;
            return _this._request({
                uri: "salesOrder/salesOrder/addOrder",
                method: "POST",
                
                data: saleOrder
            })
        },
         /**
         * 编辑业务订单
         * @method BAAS.SalesOrder_updateOrder
         * @param {Object} obj BAAS.SalesOrder 实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        SalesOrder_updateOrder: function (saleOrder) {
            var _this = this;
            return _this._request({
                uri: "salesOrder/salesOrder/updateOrder",
                method: "POST",
                
                data: saleOrder
            })
        },
        /**
         * 删除业务订单
         * @method BAAS.SalesOrder_delete
         * @param {Object} obj BAAS.SalesOrder 实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        SalesOrder_delete: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: "salesOrder/salesOrder/delete",
                method: "POST",
                
                data: {
                    salesOrder_id:opt.salesOrder_id
                }
            })
        },
        /**
         * 彻底删除业务订单
         * @method BAAS.SalesOrder_completeDelete
         * @param {Object} obj BAAS.SalesOrder 实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        SalesOrder_completeDelete: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: "salesOrder/salesOrder/do/delete",
                method: "POST",
                data: {
                    salesOrder_id:opt.salesOrder_id
                }
            })
        },
        /**
         * @开始服务
         * @method BAAS.start_service
         * @param {Object} obj BAAS.SalesOrder 实例
         * @opt.user_info 服务人员id
         * @opt.order_id 订单id
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        start_service: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: "order/order/startservice/"+opt.order_id+"/"+opt.user_info,
                method: "POST",
                data:opt
            });
        },
        /**
         * @记录开始服务地理坐标
         * @method BAAS.start_service_coordinate
         * @param {Object} obj BAAS.SalesOrder 实例
         * @opt.id 服务人员id，存于user_info里面
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        start_service_coordinate: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: "servant/location/"+opt.user_info+"/"+opt.order_id+ "/in/",
                method: "POST",
                data:opt
            });
        },
        /**
         * @结束服务
         * @method BAAS.end_service
         * @param {Object} obj BAAS.SalesOrder 实例
         * @opt.order_id 订单id
         * @opt.user_info 服务人员id，存于user_info里面
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        end_service: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: "order/order/endservice/"+opt.order_id+"/"+opt.user_info,
                method: "POST",
                data:opt
            });
        },
        /**
         * @记录结束服务地理坐标
         * @method BAAS.end_service_coordinate
         * @param {Object} obj BAAS.SalesOrder 实例
         * @opt.id 服务人员id，存于user_info里面
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        end_service_coordinate: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: "servant/location/"+opt.user_info+"/"+opt.order_id+ "/out/",
                method: "POST",
                data:opt
            });
        },
        /**
         * @订单支付
         * @method BAAS.order_payment
         * @param {Object} obj BAAS.SalesOrder 实例
         * @opt.user_info 服务人员id
         * @opt.order_id 订单id
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        order_payment: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: "order/order/payok/"+opt.order_id+"/"+opt.user_info,
                method: "POST",
                data:opt
            });
        },
        /**
         * @订单评估(通过)
         * @method BAAS.order_assessmentOK
         * @param {Object} obj BAAS.SalesOrder 实例
         * @opt.user_info 服务人员id
         * @opt.order_id 订单id
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        order_assessmentOK: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: "order/order/estimate/ok/"+opt.order_id+"/"+opt.user_info,
                method: "POST",
                data:opt
            });
        },
        /**
         * @订单评估(未通过)
         * @method BAAS.order_assessmentNO
         * @param {Object} obj BAAS.SalesOrder 实例
         * @opt.user_info 服务人员id
         * @opt.order_id 订单id
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        order_assessmentNO: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: "order/order/estimate/no/"+opt.order_id+"/"+opt.user_info,
                method: "POST",
                data:opt
            });
        },
    })
})(window);
/**
 * 历史表
 * @param opt
 * @returns {*}
 */
(function(root){
    "use strict";
    var BAAS = root.BAAS = root.BAAS || {};
    /**
     * @class BAAS.SalesOrder
     * @constructor
     * @param {Object} opt 参数对象
     * @param {ObjectId} opt._id 主键
     * @param {String} opt.salesOrder_id 订单号
     * @param {String} opt.time 操作时间
     * @param {String} opt.manager_account 操作者昵称
     * @param {String} opt.manager_id 操作者ID
     * @param {String} opt.action 操作动作
     * @param {String} opt.type 操作类型
     */
    BAAS.SalesOrderHistory = function (opt) {
        opt = opt || {};
        /**
         * 主键
         * @property _id
         * @type ObjectId
         * @default ""
         */
        this._id = opt._id || "";
        /**
         * 订单号
         * @property salesOrder_id
         * @type String
         * @default ""
         */
        this.salesOrder_id = opt.salesOrder_id || "";
        /**
         * 操作时间
         * @property time
         * @type String
         * @default ""
         */
        this.time = opt.time || "";
        /**
         * 操作者昵称
         * @property manager_account
         * @type String
         * @default ""
         */
        this.manager_account = opt.manager_account || "";
        /**
         * 操作者ID
         * @property manager_id
         * @type String
         * @default ""
         */
        this.manager_id = opt.manager_id || "";
        /**
         * 操作动作
         * @property action
         * @type String
         * @default ""
         */
        this.action = opt.action || "";
        /**
         * 操作类型
         * @property type
         * @type String
         * @default ""
         */
        this.type = opt.type || "";
    },
    //封装set get方法
    BAAS._extend(BAAS.SalesOrderHistory.prototype,{
        /**
         * setter方法
         * @method set
         * @param {String} key 实例属性名
         * @param {*} value 实例属性值
         * @return {Boolean} 是否成功
         */
        set: function (key, value) {
            return !!key && (this[key] = value);
        },
        /**
         * getter方法
         * @method get
         * @param {String} key 实例属性名
         * @return {*} 实例属性值或false
         */
        get: function (key) {
            return !!key && this[key];
        },
        setService_type:function(_id){
            return this.set("_id", _id);
        },
        getService_type: function () {
            return this.get("_id");
        },
        setService_code:function(salesOrder_id){
            return this.set("salesOrder_id", salesOrder_id);
        },
        getService_code: function () {
            return this.get("salesOrder_id");
        },
        setTime:function(time){
            return this.set("time", time);
        },
        getTime: function () {
            return this.get("time");
        },
        setManager_account:function(manager_account){
            return this.set("manager_account", manager_account);
        },
        getManager_account: function () {
            return this.get("manager_account");
        },
        setManager_id:function(manager_id){
            return this.set("manager_id", manager_id);
        },
        getManager_id: function () {
            return this.get("manager_id");
        },
        setAction:function(action){
            return this.set("action",action);
        },
        getAction:function(){
            return this.get("action");
        },
        setType:function(type){
            return this.set("type", type);
        },
        getType: function () {
            return this.get("type");
        },
    }),
    BAAS._extend(BAAS._App.prototype,{
        /**
         * 返回业务订单列表历史
         * @method BAAS.SalesOrderHistory_list
         * @param {Object} obj BAAS.SalesOrder 实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        SalesOrderHistory_list: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: "salesOrder/salesOrderHistory/list",
                method: "GET",
                data: opt
            })
        },
        /**
         * 搜索历史业务工单
         * @method BAAS.SalesOrderHistory_search
         * @param {Object} obj BAAS.SalesOrder 实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        SalesOrderHistory_search: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: "salesOrder/salesOrderHistory/search",
                method: "POST",
                data: opt
            });
        },
        /**
         * 添加历史业务订单
         * @method BAAS.SalesOrderHistory_edit
         * @param {Object} obj BAAS.SalesOrder 实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        SalesOrderHistory_edit: function (salesOrderHistory,opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: "salesOrder/salesOrderHistory/edit/"+opt._id,
                method: "POST",
                data: salesOrderHistory
            })
        },
        /**
         * 删除历史业务订单
         * @method BAAS.SalesOrderHistory_delete
         * @param {Object} obj BAAS.SalesOrder 实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        SalesOrderHistory_delete: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: "salesOrder/salesOrderHistory/delete",
                method: "POST",
                data: {
                    _id:opt._id
                }
            })
        }
    });
})(window);

/**
 * 回访
 * @module CallStation
 */
(function (root) {
    "use strict";
    var BAAS = root.BAAS = root.BAAS || {};
    /**
     * @class BAAS.Member
     * @constructor
     * @param {Object} opt 参数对象
     * @param {String} opt.name 姓名
     * @param {String} opt.sex 性别
     * @param {String} opt.age 年龄
     * @param {String} opt.cardid 卡号
     * @param {String} opt.phone 联系方式
     * @param {String} opt.xingzheng 行政
     * @param {String} opt.jiedao 街道
     * @param {String} opt.shequ 社区
     * @param {String} opt.address 地址
     *
     */
    BAAS.Member = function(opt){
        opt = opt || {};
        /**
         * 姓名
         * @property name
         * @type String
         * @default ""
         */
        this.name = opt.name || "";
        /**
         * 性别
         * @property age
         * @type String
         * @default ""
         */
        this.sex = opt.sex || "";
        /**
         * 年龄
         * @property age
         * @type String
         * @default ""
         */
        this.age = opt.age || "";
        /**
         * 卡号
         * @property cardid
         * @type String
         * @default ""
         */
        this.cardid = opt.cardid || "";
        /**
         * 联系方式
         * @property phone
         * @type String
         * @default ""
         */
        this.phone = opt.phone || "";
        /**
         * 行政
         * @property xingzheng
         * @type String
         * @default ""
         */
        this.xingzheng = opt.xingzheng || "";
        /**
         * 街道
         * @property jiedao
         * @type String
         * @default ""
         */
        this.jiedao = opt.jiedao || "";
        /**
         * 社区
         * @property shequ
         * @type String
         * @default ""
         */
        this.shequ = opt.shequ || "";
        /**
         * 地址
         * @property address
         * @type String
         * @default ""
         */
        this.address = opt.address || "";
    },
    //封装set get方法
    BAAS._extend(BAAS.Member.prototype,{
        /**
         * setter方法
         * @method set
         * @param {String} key 实例属性名
         * @param {*} value 实例属性值
         * @return {Boolean} 是否成功
         */
        set: function (key, value) {
            return !!key && (this[key] = value);
        },
        /**
         * getter方法
         * @method get
         * @param {String} key 实例属性名
         * @return {*} 实例属性值或false
         */
        get: function (key) {
            return !!key && this[key];
        },
        setName:function(name){
            return this.set("name", name);
        },
        getName: function () {
            return this.get("name");
        },
        setSex:function(sex){
            return this.set("sex", sex);
        },
        getSex: function () {
            return this.get("sex");
        },
        setAge:function(age){
            return this.set("age",age);
        },
        getAge:function(){
            return this.get("age");
        },
        setCardid:function(cardid){
            return this.set("cardid", cardid);
        },
        getCardid: function () {
            return this.get("cardid");
        },
        setPhone:function(phone){
            return this.set("phone", phone);
        },
        getPhone: function () {
            return this.get("phone");
        },
        setXingzheng:function(xingzheng){
            return this.set("xingzheng", xingzheng);
        },
        getXingzheng: function () {
            return this.get("xingzheng");
        },
        setJiedao:function(jiedao){
            return this.set("jiedao", jiedao);
        },
        getJiedao: function () {
            return this.get("jiedao");
        },
        setShequ:function(shequ){
            return this.set("shequ", shequ);
        },
        getShequ: function () {
            return this.get("shequ");
        },
        setAddress:function(address){
            return this.set("address", address);
        },
        getAddress: function () {
            return this.get("address");
        },
    }),
    /**
     * @class BAAS.CallStation
     * @constructor
     * @param {Object} opt 参数对象
     * @param {String} opt.service_type 服务类型
     * @param {String} opt.service_code 服务编码
     * @param {String} opt.call_start 开始时间
     * @param {String} opt.call_end 结束时间
     * @param {String} opt.call_type 回访类型
     * @param {String} opt.Member member对象
     * @param {String} opt.job_code 编号
     * @param {String} opt.condition 搜索条件
     *
     */
    BAAS.CallStation = function (opt) {
        opt = opt || {};
        /**
         * 服务类型
         * @property service_type
         * @type String
         * @default ""
         */
        this.service_type = opt.service_type || "";
        /**
         * 服务编码
         * @property service_code
         * @type String
         * @default ""
         */
        this.service_code = opt.service_code || "";
        /**
         * 开始时间
         * @property call_start
         * @type String
         * @default ""
         */
        this.call_start = opt.call_start || "";
        /**
         * 结束时间
         * @property call_end
         * @type String
         * @default ""
         */
        this.call_end = opt.call_end || "";
        /**
         * 回访类型
         * @property call_type
         * @type String
         * @default ""
         */
        this.call_type = opt.call_type || "";
        /**
         * member对象
         * @property Member
         * @type document
         * @default ""
         */
        this.Member = opt.Member || {};
        /**
         * 编号
         * @property job_code
         * @type String
         * @default ""
         */
        this.job_code = opt.job_code || "";
        /**
         * 搜索条件
         * @property condition
         * @type String
         * @default ""
         */
        this.condition = opt.condition || "";
    },
    //封装set get方法
    BAAS._extend(BAAS.CallStation.prototype,{
        /**
         * setter方法
         * @method set
         * @param {String} key 实例属性名
         * @param {*} value 实例属性值
         * @return {Boolean} 是否成功
         */
        set: function (key, value) {
            return !!key && (this[key] = value);
        },
        /**
         * getter方法
         * @method get
         * @param {String} key 实例属性名
         * @return {*} 实例属性值或false
         */
        get: function (key) {
            return !!key && this[key];
        },
        setService_type:function(service_type){
            return this.set("service_type", service_type);
        },
        getService_type: function () {
            return this.get("service_type");
        },
        setService_code:function(service_code){
            return this.set("service_code", service_code);
        },
        getService_code: function () {
            return this.get("service_code");
        },
        setCall_start:function(call_start){
            return this.set("call_start", call_start);
        },
        getCall_start: function () {
            return this.get("call_start");
        },
        setCall_end:function(call_end){
            return this.set("call_end", call_end);
        },
        getCall_end: function () {
            return this.get("call_end");
        },
        setCall_type:function(call_type){
            return this.set("call_type", call_type);
        },
        getCall_type: function () {
            return this.get("call_type");
        },
        setJob_code:function(job_code){
            return this.set("job_code", job_code);
        },
        getJob_code: function () {
            return this.get("job_code");
        },
        setCondition:function(condition){
            return this.set("condition", condition);
        },
        getCondition: function () {
            return this.get("condition");
        },
        setMember:function(member){
            return this.set("member", member);
        },
        getMember: function () {
            return this.get("member");
        },
    }),
    BAAS._extend(BAAS._App.prototype, {
        CallStation: BAAS.CallStation,
        /**
         * 列表
         * @method BAAS.CallStation_list
         * @param {Object} obj BAAS.CallStation实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        CallStation_list: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: "callStation/callOrder/list",
                method: "GET",
                
                data: opt
            })
        },
        /**
         * 根据工单job_code获取该工单的详细信息
         * @method BAAS.CallStation_getInfo
         * @param {Object} obj BAAS.CallStation实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        CallStation_getInfo: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: "callStation/callOrder/code/"+opt.job_code,
                method: "GET",
                
                data: {
                    job_code:opt.code
                }
            })
        },
        /**
         * 编辑&新建工单
         * @method BAAS.CallStation_update
         * @param {Object} obj BAAS.CallStation实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        CallStation_update: function (callStation,opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: "callStation/callOrder/edit/"+opt.job_code,
                method: "POST",
                
                data: callStation
            })
        },
        /**
         * 删除工单
         * @method BAAS.CallStation_delete
         * @param {Object} obj BAAS.CallStation实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        CallStation_delete: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: "callStation/callOrder/delete",
                method: "POST",
                
                data: {
                    job_code:opt.code
                }
            })
        },
        /**
         * 搜索工单
         * @method BAAS.CallStation_search
         * @param {Object} obj BAAS.CallStation实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        CallStation_search: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: "callStation/callOrder/search",
                method: "POST",
                
                data: opt
            })
        }
    });
})(window);
/**
 * 话务员活动行为
 * @module Behavor
 */
(function (root) {
    "use strict";
    var BAAS = root.BAAS = root.BAAS || {};
    /**
     * @class BAAS.Member
     * @constructor
     * @param {Object} opt 参数对象
     * @param {String} opt.account 账号
     * @param {String} opt.manager_id 话务员ID
     * @param {String} opt.create_time 创建时间
     * @param {String} opt.behavor 行为类型
     *
     */
    BAAS.Behavor = function (opt) {
        opt = opt || {};
        /**
         * 主键
         * @property _id
         * @type ObjectId
         * @default ""
         */
        this._id = opt._id || "";
        /**
         * 账号
         * @property account
         * @type String
         * @default ""
         */
        this.account = opt.account || "";
        /**
         * 话务员ID
         * @property manager_id
         * @type String
         * @default ""
         */
        this.manager_id = opt.manager_id || "";
        /**
         * 创建时间
         * @property create_time
         * @type String
         * @default ""
         */
        this.create_time = opt.create_time || "";
        /**
         * 行为类型
         * @property behavor
         * @type String
         * @default ""
         */
        this.behavor = opt.behavor || "";
    },
    BAAS._extend(BAAS.Behavor.prototype,{
        /**
         * setter方法
         * @method set
         * @param {String} key 实例属性名
         * @param {*} value 实例属性值
         * @return {Boolean} 是否成功
         */
        set: function (key, value) {
            return !!key && (this[key] = value);
        },
        /**
         * getter方法
         * @method get
         * @param {String} key 实例属性名
         * @return {*} 实例属性值或false
         */
        get: function (key) {
            return !!key && this[key];
        },
        set_id:function(_id){
            return this.set("_id", _id);
        },
        get_id: function () {
            return this.get("_id");
        },
        setAccount:function(account){
            return this.set("account", account);
        },
        getAccount: function () {
            return this.get("account");
        },
        setManager_id:function(manager_id){
            return this.set("manager_id", manager_id);
        },
        getManager_id: function () {
            return this.get("manager_id");
        },
        setCreate_time:function(create_time){
            return this.set("create_time", create_time);
        },
        getCreate_time: function () {
            return this.get("create_time");
        },
        setBehavor:function(behavor){
            return this.set("behavor", behavor);
        },
        GetBehavor: function () {
            return this.get("behavor");
        },
    }),
    BAAS._extend(BAAS._App.prototype, {
        Behavor: BAAS.Behavor,
        /**
         * 获取话务员活动行为列表
         * @method BAAS.Behavor_list
         * @param {Object} obj BAAS.Behavor实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Behavor_list: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: "callStation/behavor/list",
                method: "GET",
                
                data: opt
            })
        },
        /**
         * 查询话务员活动行为信息
         * @method BAAS.Behavor_search
         * @param {Object} obj BAAS.Behavor实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Behavor_search: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: "callStation/behavor/search",
                method: "POST",
                
                data: opt
            })
        },
        /**
         * 记录话务员活动行为
         * @method BAAS.Behavor_search
         * @param {Object} obj BAAS.Behavor实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Behavor_record: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: "callStation/behavor/record",
                method: "POST",
                
                data: opt
            })
        }
    });
})(window);
/**
 * 会员卡
 */
(function (root) {
    "use strict";
    var BAAS = root.BAAS = root.BAAS || {};
    /**
     * @class BAAS.Member
     * @constructor
     * @param {Object} opt 参数对象
     * @param {ObjectId} opt._id 会员主键
     * @param {String} opt.type 类型
     * @param {String} opt.cardid 身份证号
     * @param {String} opt.phone 联系电话
     * @param {String} opt.name 姓名
     * @param {String} opt.em_name 紧急联系电话
     * @param {String} opt.em_phone 紧急联系人
     *
     */
    BAAS.Member = function(opt){
        opt = opt || {};
        /**
         * 主键
         * @property _id
         * @type ObjectId
         * @default ""
         */
        this._id = opt._id || "";
        /**
         * 类型
         * @property type
         * @type String
         * @default ""
         */
        this.type = opt.type || "";
        /**
         * 身份证号
         * @property cardid
         * @type String
         * @default ""
         */
        this.cardid = opt.cardid || "";
        /**
         * 联系电话数组
         * @property phone
         * @type String
         * @default ""
         */
        this.phone = opt.phone || [];
        /**
         * 姓名
         * @property name
         * @type String
         * @default ""
         */
        this.name = opt.name || "";
        /**
         * 紧急联系人
         * @property em_name
         * @type String
         * @default ""
         */
        this.em_name = opt.em_name || "";
        /**
         * 紧急联系电话
         * @property em_phone
         * @type String
         * @default ""
         */
        this.em_phone = opt.em_phone || "";
    },
    //封装set get方法
    BAAS._extend(BAAS.Member.prototype,{
        /**
         * setter方法
         * @method set
         * @param {String} key 实例属性名
         * @param {*} value 实例属性值
         * @return {Boolean} 是否成功
         */
        set: function (key, value) {
            return !!key && (this[key] = value);
        },
        /**
         * getter方法
         * @method get
         * @param {String} key 实例属性名
         * @return {*} 实例属性值或false
         */
        get: function (key) {
            return !!key && this[key];
        },
        set_id:function(_id){
            return this.set("_id", _id);
        },
        get_id: function () {
            return this.get("_id");
        },
        setCard_id:function(card_id){
            return this.set("card_id", card_id);
        },
        getCard_id: function () {
            return this.get("card_id");
        },
        setType:function(type){
            return this.set("type", type);
        },
        getType: function () {
            return this.get("type");
        },
        setPhone:function(phone){
            return this.set("phone", phone);
        },
        getPhone: function () {
            return this.get("phone");
        },
        setName:function(name){
            return this.set("name", name);
        },
        getName: function () {
            return this.get("name");
        },
        setEm_name:function(em_name){
            return this.set("em_name", em_name);
        },
        getEm_name: function () {
            return this.get("em_name");
        },
        setEm_phone:function(em_phone){
            return this.set("em_phone", em_phone);
        },
        getEm_phone: function () {
            return this.get("em_phone");
        },
    }),
    /**
     * @class BAAS.Member
     * @constructor
     * @param {Object} opt 参数对象
     * @param {ObjectId} opt._id 会员主键
     * @param {String} opt.card_id 卡号
     * @param {String} opt.fund 卡金
     * @param {String} opt.type 类型
     * @param {String} opt.create_time 创建时间
     * @param {String} opt.status 状态
     * @param {String} opt.Member member对象
     * @param {String} opt.number 调用接口卡号
     * @param {String} opt.rule 生成规则
     */
    BAAS.Card = function (opt) {
        opt = opt || {};
        /**
         * 主键
         * @property _id
         * @type ObjectId
         * @default ""
         */
        this._id = opt._id || "";
        /**
         * 卡号
         * @property card_id
         * @type String
         * @default ""
         */
        this.card_id = opt.card_id || "";
        /**
         * 卡金
         * @property fund
         * @type double
         * @default ""
         */
        this.fund = opt.fund || 0;
        /**
         * 类型
         * @property type
         * @type String
         * @default ""
         */
        this.type = opt.type || "";
        /**
         * 创建时间
         * @property create_time
         * @type String
         * @default ""
         */
        this.create_time = opt.create_time || "";
        /**
         * 状态
         * @property status
         * @type String
         * @default ""
         */
        this.status = opt.status || 0;
        /**
         * member对象
         * @property Member
         * @type document
         * @default ""
         */
        this.Member = opt.Member || {};
    },
    //封装set get方法
    BAAS._extend(BAAS.Card.prototype,{
        /**
         * setter方法
         * @method set
         * @param {String} key 实例属性名
         * @param {*} value 实例属性值
         * @return {Boolean} 是否成功
         */
        set: function (key, value) {
            return !!key && (this[key] = value);
        },
        /**
         * getter方法
         * @method get
         * @param {String} key 实例属性名
         * @return {*} 实例属性值或false
         */
        get: function (key) {
            return !!key && this[key];
        },
        set_id:function(_id){
            return this.set("_id", _id);
        },
        get_id: function () {
            return this.get("_id");
        },
        setCard_id:function(card_id){
            return this.set("card_id", card_id);
        },
        getCard_id: function () {
            return this.get("card_id");
        },
        setFund:function(fund){
            return this.set("fund", fund);
        },
        getFund: function () {
            return this.get("fund");
        },
        setType:function(type){
            return this.set("type", type);
        },
        getType: function () {
            return this.get("type");
        },
        setCreate_time:function(create_time){
            return this.set("create_time", create_time);
        },
        getCreate_time: function () {
            return this.get("create_time");
        },
        setStatus:function(status){
            return this.set("status", status);
        },
        getStatus: function () {
            return this.get("status");
        },
        setMember:function(Member){
            return this.set("Member", Member);
        },
        getMember: function () {
            return this.get("Member");
        },
    }),

    BAAS._extend(BAAS._App.prototype, {
        Card: BAAS.Card,
        Member:BAAS.Member,
        /**
         * 添加会员卡
         * @method BAAS.Card_addCard
         * @param {Object} obj BAAS.Card实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Card_addCard: function (card) {
            var _this = this;
            return _this._request({
                uri: "card/index/create",
                method: "POST",
                
                data: card
            })
        },
        /**
         * 获取会员卡信息及该会员卡绑定的老人信息
         * @method BAAS.Card_elderid
         * @param {Object} obj BAAS.Card实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Card_elderid: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: "card/index/elderid/"+opt._id,
                method: "GET",
                
                data: {
                    _id:opt._id
                }
            })
        },
        /**
         * 根获取会员卡列表（不包括已注销的会员卡）
         * @method BAAS.Card_list
         * @param {Object} obj BAAS.Card实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Card_list: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: "card/index/list",
                method: "GET",
                
                data: opt
            })
        },
        /**
         * 会员卡绑定老人（type为elder）
         * @method BAAS.Card_bindElder
         * @param {Object} obj BAAS.Card实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Card_bindElder: function (member,opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: "card/index/"+opt._id+"/bindElder",
                method: "POST",
                
                data: member
            })
        },
        /**
         * 更改会员卡状态，status=1正常，status=2停用
         * @method BAAS.Card_changeStatus
         * @param {Object} obj BAAS.Card实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Card_changeStatus: function (card,opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: "card/index/changeStatus/"+opt._id,
                method: "POST",
                
                data: card
            })
        },
        /**
         * 获取会员卡的历史消费记录列表
         * @method BAAS.Card_history
         * @param {Object} obj BAAS.Card实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Card_history: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: "card/index/history/"+opt.card_id,
                method: "GET",
                
                data: {
                    card_id:opt.card_id
                }
            })
        },
        /**
         * 会员卡充值
         * @method BAAS.Card_charge
         * @param {Object} obj BAAS.Card实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Card_charge: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: "card/index/charge/"+opt.transaction_no,
                method: "POST",
                
                data: {
                    transaction_no:opt.transaction_no
                }
            })
        },
        /**
         * 会员卡消费
         * @method BAAS.Card_pay
         * @param {Object} obj BAAS.Card实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Card_pay: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: "card/index/pay/"+opt.transaction_no,
                method: "POST",
                
                data: {
                    transaction_no:opt.transaction_no
                }
            })
        },
        /**
         * 获取交易明细
         * @method BAAS.Card_information
         * @param {Object} obj BAAS.Card实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Card_information: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: "card/index/information/"+opt.transaction_no,
                method: "GET",
                
                data: {
                    transaction_no:opt.transaction_no
                }
            })
        },
        /**
         * 注销会员卡（会员卡状态置为-1，member字段置为cancel，该会员卡绑定的老人档案中，card_number置为空，old_card_number字段中记录该注销的会员卡号）
         * @method BAAS.Card_cancel_card
         * @param {Object} obj BAAS.Card实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Card_cancel_card: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: "card/index/cancel/card/"+opt.card_id,
                method: "GET",
                
                data: {
                    card_id:opt.card_id
                }
            })
        },
        /**
         * 解除绑定会员卡（会员卡状态置为0，member字段置为空，余额置为0，该会员卡绑定的老人档案中，card_number置为空）
         * @method BAAS.Card_cancel_card
         * @param {Object} obj BAAS.Card实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Card_renew: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: "card/index/renew/"+opt.card_id,
                method: "GET",
                
                data: {
                    card_id:opt.card_id
                }
            })
        },
        /**
         * 搜索会员卡，返回符合搜索条件，且未被注销的会员卡，无对limit和page参数的处理，且不返回总条数
         * @method BAAS.Card_cancel_card
         * @param {Object} obj BAAS.Card实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Card_searchCard:function(card,opt){
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: "card/index/searchCard"+opt.card_no,
                method: "POST",
                
                data: card
            })
        }
    })
})(window);
/**
 * 用于保存交易信息 transaction
 */
(function (root) {
    var BAAS = root.BAAS = root.BAAS || {};
    /**
     * @class BAAS.Transaction
     * @constructor
     * @param {Object} opt 参数对象
     * @param {ObjectId} opt._id 主键
     * @param {String} opt.card_id 卡号
     * @param {String} opt.transaction_no 交易单号
     * @param {String} opt.fund 金额
     * @param {String} opt.type 类型
     * @param {String} opt.description 描述
     * @param {String} opt.serviceType1_title 1级服务名
     * @param {String} opt.serviceType2_title 2级服务名
     * @param {String} opt.serviceType3_title 3级服务名
     * @param {String} opt.serviceType1_code 1级服务编号
     * @param {String} opt.serviceType2_code 2级服务编号
     * @param {String} opt.serviceType3_code 3级服务编号
     * @param {String} opt.create_time 创建时间
     * @param {String} opt.shop 消费方式
     * @param {String} opt.transaction_operator 消费操作人
     * @param {String} opt.status 状态
     * @param {String} opt.charge_operator 充值操作人
     */
    BAAS.Transaction = function(opt){
        opt = opt || {};
        /**
         * 主键
         * @property _id
         * @type ObjectId
         * @default ""
         */
        this._id = opt._id || "";
        /**
         * 卡号
         * @property card_id
         * @type String
         * @default ""
         */
        this.card_id = opt.card_id || "";
        /**
         * 交易单号
         * @property transaction_no
         * @type String
         * @default ""
         */
        this.transaction_no = opt.transaction_no || "";
        /**
         * 卡金
         * @property fund
         * @type String
         * @default ""
         */
        this.fund = opt.fund || "";
        /**
         * 类型
         * @property type
         * @type String
         * @default ""
         */
        this.type = opt.type || "";
        /**
         * 描述
         * @property description
         * @type String
         * @default ""
         */
        this.description = opt.description || "";
        /**
         * 1级服务名
         * @property serviceType1_title
         * @type String
         * @default ""
         */
        this.serviceType1_title = opt.serviceType1_title || "";
        /**
         * 2级服务名
         * @property serviceType2_title
         * @type String
         * @default ""
         */
        this.serviceType2_title = opt.serviceType2_title || "";
        /**
         * 3级服务名
         * @property serviceType3_title
         * @type String
         * @default ""
         */
        this.serviceType3_title = opt.serviceType3_title || "";
        /**
         * 1级服务单号
         * @property serviceType1_code
         * @type String
         * @default ""
         */
        this.serviceType1_code = opt.serviceType1_code || "";
        /**
         * 2级服务单号
         * @property serviceType2_code
         * @type String
         * @default ""
         */
        this.serviceType2_code = opt.serviceType2_code || "";
        /**
         * 3级服务单号
         * @property serviceType3_code
         * @type String
         * @default ""
         */
        this.serviceType3_code = opt.serviceType3_code || "";
        /**
         * 创建时间
         * @property create_time
         * @type String
         * @default ""
         */
        this.create_time = opt.create_time || "";
        /**
         * 消费方式
         * @property shop
         * @type String
         * @default ""
         */
        this.shop = opt.shop || "";
        /**
         * 消费操作人
         * @property transaction_operator
         * @type String
         * @default ""
         */
        this.transaction_operator = opt.transaction_operator || "";
        /**
         * 状态
         * @property status
         * @type String
         * @default ""
         */
        this.status = opt.status || "";
        /**
         * 充值操作人
         * @property charge_operator
         * @type String
         * @default ""
         */
        this.charge_operator = opt.charge_operator || "";
    },
    //封装set get方法
    BAAS._extend(BAAS.Transaction.prototype,{
        /**
         * setter方法
         * @method set
         * @param {String} key 实例属性名
         * @param {*} value 实例属性值
         * @return {Boolean} 是否成功
         */
        set: function (key, value) {
            return !!key && (this[key] = value);
        },
        /**
         * getter方法
         * @method get
         * @param {String} key 实例属性名
         * @return {*} 实例属性值或false
         */
        get: function (key) {
            return !!key && this[key];
        },
        set_id:function(_id){
            return this.set("_id", _id);
        },
        get_id: function () {
            return this.get("_id");
        },
        setCard_id:function(card_id){
            return this.set("card_id", card_id);
        },
        getCard_id: function () {
            return this.get("card_id");
        },
        setTransaction_no:function(transaction_no){
            return this.set("transaction_no", transaction_no);
        },
        getTransaction_no: function () {
            return this.get("transaction_no");
        },
        setFund:function(fund){
            return this.set("fund", fund);
        },
        getFund: function () {
            return this.get("fund");
        },
        setType:function(type){
            return this.set("type", type);
        },
        getType: function () {
            return this.get("type");
        },
        setDescription:function(description){
            return this.set("description", description);
        },
        getDescription: function () {
            return this.get("description");
        },
        setServiceType1_title:function(serviceType1_title){
            return this.set("serviceType1_title", serviceType1_title);
        },
        getServiceType1_title: function () {
            return this.get("serviceType1_title");
        },
        setServiceType2_title:function(serviceType2_title){
            return this.set("serviceType2_title", serviceType2_title);
        },
        getServiceType2_title: function () {
            return this.get("serviceType2_title");
        },
        setServiceType3_title:function(serviceType3_title){
            return this.set("serviceType3_title", serviceType3_title);
        },
        getServiceType3_title: function () {
            return this.get("serviceType3_title");
        },
        setServiceType1_code:function(serviceType1_code){
            return this.set("serviceType1_code", serviceType1_code);
        },
        getServiceType1_code: function () {
            return this.get("serviceType1_code");
        },
        setServiceType2_code:function(serviceType2_code){
            return this.set("serviceType2_code", serviceType2_code);
        },
        getServiceType2_code: function () {
            return this.get("serviceType2_code");
        },
        setServiceType3_code:function(serviceType3_code){
            return this.set("serviceType3_code", serviceType3_code);
        },
        getServiceType3_code: function () {
            return this.get("serviceType3_code");
        },
        setCreate_time:function(create_time){
            return this.set("create_time", create_time);
        },
        getCreate_time: function () {
            return this.get("create_time");
        },
        setShop:function(shop){
            return this.set("shop", shop);
        },
        getShop: function () {
            return this.get("shop");
        },
        setTransaction_operator:function(transaction_operator){
            return this.set("transaction_operator", transaction_operator);
        },
        getTransaction_operator: function () {
            return this.get("transaction_operator");
        },
        setStatus:function(status){
            return this.set("status", status);
        },
        getStatus: function () {
            return this.get("status");
        },
        setCharge_operator:function(charge_operator){
            return this.set("charge_operator", charge_operator);
        },
        getCharge_operator: function () {
            return this.get("charge_operator");
        },
    }),
    BAAS._extend(BAAS._App.prototype, {
        Transaction: BAAS.Transaction,
        /**
         * 生成会员卡交易，仅生成一条交易记录并返回交易号， 不对会员卡金额做增减
         * @method BAAS.Transaction_transaction
         * @param {Object} obj BAAS.Transaction实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Transaction_transaction:function(transaction,opt){
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: "card/index/transaction/"+opt.card_no,
                method: "POST",
                
                data: transaction
            })
        },
    })
})(window);
/**
 * 备忘录CMS
 * @module CMS
 */
(function (root) {
    "use strict";
    var BAAS = root.BAAS = root.BAAS || {};
    /**
     * @class BAAS.CMS
     * @constructor
     * @param {Object} opt 参数对象
     * @param {ObjectId} opt._id 主键
     * @param {String} opt.username 创建者账号
     * @param {String} opt.title 文章标题
     * @param {String} opt.content 文章内容
     * @param {String} opt.type 文章类型
     * @param {String} opt.company_code 所属公司编号
     * @param {String} opt.company_name 所属公司名称
     * @param {String} opt.attribute 参数数组
     */
    BAAS.CMS = function (opt) {
        opt = opt || {};
        /**
         * 主键
         * @property _id
         * @type ObjectId
         * @default ""
         */
        this._id = opt._id || "";
        /**
         * 创建者账号
         * @property username
         * @type String
         * @default ""
         */
        this.username = opt.username || "";
        /**
         * 文章标题
         * @property title
         * @type String
         * @default ""
         */
        this.title = opt.title || "";
        /**
         * 文章内容
         * @property content
         * @type String
         * @default ""
         */
        this.content = opt.content || "";
        /**
         * 文章类型
         * @property type
         * @type String
         * @default ""
         */
        this.type = opt.type || "";
        /**
         * 文章标题
         * @property company_code
         * @type String
         * @default ""
         */
        this.company_code = opt.company_code || "";
        /**
         * 文章标题
         * @property company_name
         * @type String
         * @default ""
         */
        this.company_name = opt.company_name || "";
        /**
         * 传入参数
         * @property attribute
         * @type String
         * @default ""
         */
        this.attribute = opt.attribute || "";
    },
    //封装set get方法
    BAAS._extend(BAAS.CMS.prototype,{
        /**
         * setter方法
         * @method set
         * @param {String} key 实例属性名
         * @param {*} value 实例属性值
         * @return {Boolean} 是否成功
         */
        set: function (key, value) {
            return !!key && (this[key] = value);
        },
        /**
         * getter方法
         * @method get
         * @param {String} key 实例属性名
         * @return {*} 实例属性值或false
         */
        get: function (key) {
            return !!key && this[key];
        },
        set_id:function(_id){
            return this.set("_id", _id);
        },
        get_id: function () {
            return this.get("_id");
        },
        setUsername:function(username){
            return this.set("username", username);
        },
        getUsername: function () {
            return this.get("username");
        },
        setTitle:function(title){
            return this.set("title", title);
        },
        getTitle: function () {
            return this.get("title");
        },
        setContent:function(content){
            return this.set("content", content);
        },
        getContent: function () {
            return this.get("content");
        },
        setType:function(type){
            return this.set("type", type);
        },
        getType: function () {
            return this.get("type");
        },
        setCompany_code:function(company_code){
            return this.set("company_code", company_code);
        },
        getCompany_code: function () {
            return this.get("company_code");
        },
        setCompany_name:function(company_name){
            return this.set("company_name", company_name);
        },
        getCompany_name: function () {
            return this.get("company_name");
        },
        setAttribute:function(attribute){
            return this.set("attribute", attribute);
        },
        getAttribute: function () {
            return this.get("attribute");
        },

    }),
    BAAS._extend(BAAS._App.prototype, {
        CMS: BAAS.CMS,
        /**
         * 查询列表
         * @method BAAS.cms_list
         * @param {Object} obj BAAS.CMS 实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        cms_list: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: "cms/index/search/list",
                method: "GET",
                
                data: opt
            });
        },
        /**
         * 保存cms，id=0 添加，其他为修改
         * @method BAAS.cms_update
         * @param {Object} obj BAAS.CMS实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        cms_update: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: "cms/index/edit/"+opt.id,
                method: "POST",
                
                data: opt
            });
        },
        /**
         * 保存cms，id=0 添加，其他为修改
         * @method BAAS.cms_updateByCode
         * @param {Object} obj BAAS.CMS实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        cms_updateByCode: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: "cms/index/edit/"+opt.id+"/"+opt.category_code,
                method: "POST",
                
                data: opt
            });
        },
        /**
         * 根据id查询cms
         * @method BAAS.cms_find
         * @param {Object} obj BAAS.CMS实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        cms_find: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: "cms/index/find/"+opt.id,
                method: "GET",
                
                data: {
                    id:opt.id
                }
            });
        },
        /**
         * 根据Id删除cms
         * @method BAAS.cms_delete
         * @param {Object} obj BAAS.CMS实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        cms_delete: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: "cms/index/delete/"+opt.id,
                method: "GET",
                
                data: {
                    id:opt.id
                }
            });
        },
    });
})(window);
/**
 * 备忘录 category
 */
(function (root) {
    var BAAS = root.BAAS = root.BAAS || {};
    /**
     * @class BAAS.Category
     * @constructor
     * @param {Object} opt 参数对象
     * @param {ObjectId} opt._id 主键
     * @param {String} opt.title 栏目名称
     * @param {String} opt.parent_code 上级栏目code
     * @param {String} opt.code 栏目code
     * @param {String} opt.manager_id 栏目创建者ID
     * @param {String} opt.manager_account 栏目创建者账号
     * @param {String} opt.manager_group_id 创建者小组ID
     * @param {String} opt.create_time 创建时间
     */
    BAAS.Category = function (opt) {
        opt = opt || {};
        /**
         * 主键
         * @property _id
         * @type ObjectId
         * @default ""
         */
        this._id = opt._id || "";
        /**
         * 栏目名称
         * @property title
         * @type String
         * @default ""
         */
        this.title = opt.title || "";
        /**
         * 上级栏目code
         * @property parent_code
         * @type String
         * @default ""
         */
        this.parent_code = opt.parent_code || "";
        /**
         * 栏目code
         * @property code
         * @type String
         * @default ""
         */
        this.code = opt.code || "";
        /**
         * 栏目创建者ID
         * @property manager_id
         * @type String
         * @default ""
         */
        this.manager_id = opt.manager_id || "";
        /**
         * 栏目创建者账号
         * @property manager_account
         * @type String
         * @default ""
         */
        this.manager_account = opt.manager_account || "";
        /**
         * 创建者小组ID
         * @property manager_group_id
         * @type String
         * @default ""
         */
        this.manager_group_id = opt.manager_group_id || "";
        /**
         * 创建时间
         * @property create_time
         * @type String
         * @default ""
         */
        this.create_time = opt.create_time || "";
    }
    //封装set get方法
    BAAS._extend(BAAS.Category.prototype,{
        /**
         * setter方法
         * @method set
         * @param {String} key 实例属性名
         * @param {*} value 实例属性值
         * @return {Boolean} 是否成功
         */
        set: function (key, value) {
            return !!key && (this[key] = value);
        },
        /**
         * getter方法
         * @method get
         * @param {String} key 实例属性名
         * @return {*} 实例属性值或false
         */
        get: function (key) {
            return !!key && this[key];
        },
        set_id:function(_id){
            return this.set("_id", _id);
        },
        get_id: function () {
            return this.get("_id");
        },
        setTitle:function(title){
            return this.set("title", title);
        },
        getTitle: function () {
            return this.get("title");
        },
        setParent_code:function(parent_code){
            return this.set("parent_code", parent_code);
        },
        getParent_code: function () {
            return this.get("parent_code");
        },
        setCode:function(code){
            return this.set("code", code);
        },
        getCode: function () {
            return this.get("code");
        },
        setManager_id:function(manager_id){
            return this.set("manager_id", manager_id);
        },
        getManager_id: function () {
            return this.get("manager_id");
        },
        setManager_account:function(manager_account){
            return this.set("manager_account", manager_account);
        },
        GetManager_account: function () {
            return this.get("manager_account");
        },
        setManager_group_id:function(manager_group_id){
            return this.set("manager_group_id", manager_group_id);
        },
        getManager_group_id: function () {
            return this.get("manager_group_id");
        },
        setCreate_time:function(create_time){
            return this.set("create_time", create_time);
        },
        getCreate_time: function () {
            return this.get("create_time");
        },
    }),
    BAAS._extend(BAAS._App.prototype, {
        Category: BAAS.Category,
        /**
         * 根据id查询cms
         * @method BAAS.Category_update
         * @param {Object} obj BAAS.Category 实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Category_update: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: "cms/category/edit/"+opt.id+"/"+opt.parent_code,
                method: "POST",
                
                data: opt
            });
        },
        /**
         * 根据id查询cms
         * @method BAAS.Category_find
         * @param {Object} obj BAAS.Category 实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Category_find: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: "cms/category/find/"+opt.id,
                method: "GET",
                
                data: {
                    id:opt._id
                }
            });
        },
        /**
         * 根据id查询cms
         * @method BAAS.Category_delete
         * @param {Object} obj BAAS.Category 实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Category_delete: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: "cms/category/delete/"+opt.id,
                method: "GET",
                
                data: {
                    id:opt._id
                }
            });
        },
        /**
         * 根据id查询cms
         * @method BAAS.Category_list
         * @param {Object} obj BAAS.Category 实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Category_list: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: "cms/category/search/category/list/"+opt.parent_code,
                method: "GET",
                
                data: opt
            });
        },
    });
})(window);
/**
 * 订单评价
 * @module Evaluate
 */
(function (root) {
    "use strict";
    var BAAS = root.BAAS = root.BAAS || {};
    /**
     * @class BAAS.Evaluate
     * @constructor
     * @param {Object} opt 参数对象
     * @param {ObjectId} opt._id 主键
     * @param {String} opt.evaluate_user 评价人
     * @param {String} opt.opinion 意见
     * @param {String} opt.evaluate_manager_account 操作人
     * @param {String} opt.evaluate_manager_id 操作人ID
     * @param {String} opt.evaluate_time 操作时间
     * @param {String} opt.salesOrder_id 评价订单号
     * @param {String} opt.satisfied 满意度(分值)
     * @param {String} opt.attitude 服务态度(分值)
     * @param {String} opt.quality 服务质量(分值)
     */
    BAAS.Evaluate = function (opt) {
        opt = opt || {};
        /**
         * 主键
         * @property _id
         * @type ObjectId
         * @default 0
         */
        this._id = opt._id || "";
        /**
         * 评价人
         * @property evaluate_user
         * @type String
         * @default ""
         */
        this.evaluate_user = opt.evaluate_user || "";
        /**
         * 意见
         * @property opinion
         * @type String
         * @default ""
         */
        this.opinion = opt.opinion || "";
        /**
         * 操作人
         * @property evaluate_manager_account
         * @type String
         * @default ""
         */
        this.evaluate_manager_account = opt.evaluate_manager_account || "";
        /**
         * 操作人ID
         * @property evaluate_manager_id
         * @type String
         * @default ""
         */
        this.evaluate_manager_id = opt.evaluate_manager_id || "";
        /**
         * 操作时间
         * @property evaluate_time
         * @type String
         * @default ""
         */
        this.evaluate_time = opt.evaluate_time || "";
        /**
         * 评价订单号
         * @property salesOrder_id
         * @type String
         * @default ""
         */
        this.salesOrder_id = opt.salesOrder_id || "";
        /**
         * 满意度(分值)
         * @property satisfied
         * @type String
         * @default ""
         */
        this.satisfied = opt.satisfied || "";
        /**
         * 服务态度(分值)
         * @property attitude
         * @type String
         * @default ""
         */
        this.attitude = opt.attitude || "";
        /**
         * 服务质量(分值)
         * @property quality
         * @type String
         * @default ""
         */
        this.quality = opt.quality || "";
    }
    //封装set get方法
    BAAS._extend(BAAS.Evaluate.property,{
        /**
         * setter方法
         * @method set
         * @param {String} key 实例属性名
         * @param {*} value 实例属性值
         * @return {Boolean} 是否成功
         */
        set: function (key, value) {
            return !!key && (this[key] = value);
        },
        /**
         * getter方法
         * @method get
         * @param {String} key 实例属性名
         * @return {*} 实例属性值或false
         */
        get: function (key) {
            return !!key && this[key];
        },
        set_id:function(_id){
            return this.set("_id", _id);
        },
        get_id: function () {
            return this.get("_id");
        },
        setEvaluate_user:function(evaluate_user){
            return this.set("evaluate_user", evaluate_user);
        },
        getEvaluate_user: function () {
            return this.get("evaluate_user");
        },
        setOpinion:function(opinion){
            return this.set("opinion", opinion);
        },
        getOpinion: function () {
            return this.get("opinion");
        },
        setEvaluate_manager_account:function(evaluate_manager_account){
            return this.set("evaluate_manager_account", evaluate_manager_account);
        },
        getEvaluate_manager_account: function () {
            return this.get("evaluate_manager_account");
        },
        setEvaluate_manager_id:function(evaluate_manager_id){
            return this.set("evaluate_manager_id", evaluate_manager_id);
        },
        getEvaluate_manager_id: function () {
            return this.get("evaluate_manager_id");
        },
        setEvaluate_time:function(evaluate_time){
            return this.set("evaluate_time", evaluate_time);
        },
        getEvaluate_time: function () {
            return this.get("evaluate_time");
        },
        setSalesOrder_id:function(salesOrder_id){
            return this.set("salesOrder_id", salesOrder_id);
        },
        getSalesOrder_id: function () {
            return this.get("salesOrder_id");
        },
        setSatisfied:function(satisfied){
            return this.set("satisfied", satisfied);
        },
        getSatisfied: function () {
            return this.get("satisfied");
        },
        setAttitude:function(attitude){
            return this.set("attitude", attitude);
        },
        getAttitude: function () {
            return this.get("attitude");
        },
        setQuality:function(quality){
            return this.set("quality", quality);
        },
        getQuality: function () {
            return this.get("quality");
        },
    });
    BAAS._extend(BAAS._App.prototype, {
        Evaluate: BAAS.Evaluate,
        /**
         * 返回订单评价列表
         * @method BAAS.Evaluate_list
         * @param {Object} obj BAAS.Evaluate实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Evaluate_list: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: "salesOrder/evaluate/list",
                method: "GET",
                
                data: opt
            })
        },
        /**
         * 根据订单评价Id获取该订单评价的详细信息
         * @method BAAS.Evaluate_getInfo
         * @param {Object} obj BAAS.Evaluate实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Evaluate_getInfo: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: "salesOrder/evaluate/code/"+opt._id,
                method: "GET",
                version:1
            })
        },
        /**
         * 编辑&新建订单评价
         * @method BAAS.Evaluate_update
         * @param {Object} obj BAAS.Evaluate实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Evaluate_update: function (evaluate,opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: "salesOrder/evaluate/edit/"+opt._id,
                method: "POST",
                
                data: evaluate
            })
        },
        /**
         * 删除订单评价
         * @method BAAS.Evaluate_delete
         * @param {Object} obj BAAS.Evaluate实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Evaluate_delete: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: "salesOrder/evaluate/delete",
                method: "POST",
                
                data: {
                    _id:opt._id
                }
            })
        },
        /**
         * 搜索工单
         * @method BAAS.Evaluate_search
         * @param {Object} obj BAAS.Evaluate实例
         * @return {BAAS._Promise} Promise对象
         * @static
         */
        Evaluate_search: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: "salesOrder/evaluate/search",
                method: "POST",
                
                data: opt
            })
        }
    });
})(window);
/**
 * 用户签到签退
 * @module Sign
 */
(function (root) {
    "use strict";
    var BAAS = root.BAAS = root.BAAS || {};
    /**
     * @class BAAS.Sign
     * @constructor
     * @param {Object} opt 参数对象
     * @param {ObjectId} opt._id 账号
     * @param {String} opt.manager_id 管理员ID
     * @param {String} opt.acount 管理员账户
     * @param {String} opt.desc 描述
     * @param {String} opt.time 操作时间
     * @param {String} opt.operation 操作
     */
    BAAS.Sign = function (opt) {
        opt = opt || {};
        /**
         * 主键
         * @property _id
         * @type ObjectId
         * @default ""
         */
        this._id = opt._id || "";
        /**
         * 管理员ID
         * @property manager_id
         * @type String
         * @default ""
         */
        this.manager_id = opt.manager_id || "";
        /**
         * 管理员账户
         * @property acount
         * @type String
         * @default ""
         */
        this.acount = opt.acount || "";
        /**
         * 描述
         * @property desc
         * @type String
         * @default ""
         */
        this.desc = opt.desc || "";
        /**
         * 操作时间
         * @property time
         * @type String
         * @default ""
         */
        this.time = opt.time || "";
        /**
         * 操作
         * @property operation
         * @type String
         * @default ""
         */
        this.operation = opt.operation || "";
    },
        BAAS._extend(BAAS.Sign.prototype, {
            /**
             * setter方法
             * @method set
             * @param {String} key 实例属性名
             * @param {*} value 实例属性值
             * @return {Boolean} 是否成功
             */
            set: function (key, value) {
                return !!key && (this[key] = value);
            },
            /**
             * getter方法
             * @method get
             * @param {String} key 实例属性名
             * @return {*} 实例属性值或false
             */
            get: function (key) {
                return !!key && this[key];
            },
            set_id: function (_id) {
                return this.set("_id", _id);
            },
            get_id: function () {
                return this.get("_id");
            },
            setManager_id: function (manager_id) {
                return this.set("manager_id", manager_id);
            },
            getManager_id: function () {
                return this.get("manager_id");
            },
            setAcount: function (acount) {
                return this.set("acount", acount);
            },
            getAcount: function () {
                return this.get("acount");
            },
            setDesc: function (desc) {
                return this.set("desc", desc);
            },
            getDesc: function () {
                return this.get("desc");
            },
            setTime: function (time) {
                return this.set("time", time);
            },
            getTime: function () {
                return this.get("time");
            },
            setOperation: function (operation) {
                return this.set("operation", operation);
            },
            getOperation: function () {
                return this.get("operation");
            },
        }),
        BAAS._extend(BAAS._App.prototype, {
            Sign: BAAS.Sign,
            /**
             * 获取当前用户签到签退信息列表
             * @method BAAS.Sign_listServant
             * @param {Object} obj BAAS.Sign实例
             * @return {BAAS._Promise} Promise对象
             * @static
             */
            Sign_listServant: function (opt) {
                var _this = this;
                opt = opt || {};
                return _this._request({
                    uri: "sign/sign/list/servant",
                    method: "GET",
                    
                    data: opt
                })
            },
            /**
             * 管理员获取签到签退信息（包含其子孙group成员)
             * @method BAAS.Sign_listManager
             * @param {Object} obj BAAS.Sign实例
             * @return {BAAS._Promise} Promise对象
             * @static
             */
            Sign_listManager: function (opt) {
                var _this = this;
                opt = opt || {};
                return _this._request({
                    uri: "sign/sign/list/manager",
                    method: "GET",
                    data: opt
                })
            },
            /**
             * 签到
             * @method BAAS.Sign_in
             * @param {Object} obj BAAS.Sign实例
             * @return {BAAS._Promise} Promise对象
             * @opt.user_info 服务人员id
             * @static
             */
            Sign_in: function (opt) {
                var _this = this;
                opt = opt || {};
                return _this._request({
                    uri: "servant/location/"+opt.user_info+"/sign_in/",
                    method: "POST",
                    data: opt
                })
            },
            /**
             * 签退
             * @method BAAS.Sign_out
             * @param {Object} obj BAAS.Sign实例
             * @return {BAAS._Promise} Promise对象
             * @static
             */
            Sign_out: function (opt) {
                var _this = this;
                opt = opt || {};
                return _this._request({
                    uri: "sign/sign/signout",
                    method: "GET",
                    data: opt
                })
            },
        });
})(window);
/**
 * 订单督办
 * @module
 */
(function (root) {
    "use strict";
    var BAAS = root.BAAS = root.BAAS || {};
    /**
     * @class BAAS.Supervise
     * @constructor
     * @param {Object} opt 参数对象
     * @param {ObjectId} opt._id 主键
     * @param {String} opt.remarks 备注
     * @param {String} opt.time 时间
     * @param {String} opt.salesOrder_id 督办订单号
     * @param {String} opt.target 督办对象
     * @param {String} opt.supervise_manager_account 督办人
     * @param {String} opt.supervise_manager_id 督办人ID
     * @param {String} opt.supervise_time 督办时间
     *
     */
    BAAS.Supervise = function (opt) {
        opt = opt || {};
        /**
         * 主键
         * @property _id
         * @type ObjectId
         * @default ""
         */
        this._id = opt._id || "";
        /**
         * 备注
         * @property remarks
         * @type String
         * @default ""
         */
        this.remarks = opt.remarks || "";
        /**
         * 时间
         * @property time
         * @type String
         * @default ""
         */
        this.time = opt.time || "";
        /**
         * 督办订单号
         * @property salesOrder_id
         * @type String
         * @default ""
         */
        this.salesOrder_id = opt.salesOrder_id || "";
        /**
         * 督办对象
         * @property target
         * @type String
         * @default ""
         */
        this.target = opt.target || "";
        /**
         * 督办人
         * @property supervise_manager_account
         * @type String
         * @default ""
         */
        this.supervise_manager_account = opt.supervise_manager_account || "";
        /**
         * 督办人ID
         * @property supervise_manager_id
         * @type String
         * @default ""
         */
        this.supervise_manager_id = opt.supervise_manager_id || "";
        /**
         * 督办时间
         * @property supervise_time
         * @type String
         * @default ""
         */
        this.supervise_time = opt.supervise_time || "";
    }
    //封装set get方法
    BAAS._extend(BAAS.Supervise.prototype,{
        /**
         * setter方法
         * @method set
         * @param {String} key 实例属性名
         * @param {*} value 实例属性值
         * @return {Boolean} 是否成功
         */
        set: function (key, value) {
            return !!key && (this[key] = value);
        },
        /**
         * getter方法
         * @method get
         * @param {String} key 实例属性名
         * @return {*} 实例属性值或false
         */
        get: function (key) {
            return !!key && this[key];
        },
        set_id:function(_id){
            return this.set("_id", _id);
        },
        get_id: function () {
            return this.get("_id");
        },
        setRemarks:function(remarks){
            return this.set("remarks", remarks);
        },
        getRemarks: function () {
            return this.get("remarks");
        },
        setTime:function(time){
            return this.set("time", time);
        },
        getTime: function () {
            return this.get("time");
        },
        setSupervise_manager_account:function(supervise_manager_account){
            return this.set("supervise_manager_account", supervise_manager_account);
        },
        getSupervise_manager_account: function () {
            return this.get("supervise_manager_account");
        },
        setSupervise_manager_id:function(supervise_manager_id){
            return this.set("supervise_manager_id", supervise_manager_id);
        },
        getSupervise_manager_id: function () {
            return this.get("supervise_manager_id");
        },
        setSupervise_time:function(supervise_time){
            return this.set("supervise_time", supervise_time);
        },
        getSupervise_time: function () {
            return this.get("supervise_time");
        },
        setSalesOrder_id:function(salesOrder_id){
            return this.set("salesOrder_id",salesOrder_id);
        },
        getSalesOrder_id:function(){
            return this.get("salesOrder_id");
        },
        setTarget:function(target){
            return this.set("target", target);
        },
        getTarget:function () {
            return this.get("target");
        },
    }),
    BAAS._extend(BAAS._App.prototype, {
        Supervise: BAAS.Supervise,
        /**
         * 返回订单督办列表
         * @method BAAS.Supervise_list
         * @param {Object} obj BAAS.Supervise实例
         * @returns {BAAS._Promise} Promise对象
         * @static
         */
        Supervise_list: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: "salesOrder/supervise/list",
                method: "GET",
                
                data: opt
            })
        },
        /**
         * 根据订单督办Id获取该订单督办的详细信息
         * @method BAAS.Supervise_getInfo
         * @param {Object} obj BAAS.Supervise实例
         * @returns {BAAS._Promise} Promise对象
         * @static
         */
        Supervise_getInfo: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: "salesOrder/supervise/code/"+opt.objId,
                method: "GET",

                data: {
                    objId:opt.objId
                }
            })
        },
        //编辑&新建订单督办
        /**
         * 根据订单督办Id获取该订单督办的详细信息
         * @method BAAS.Supervise_update
         * @param {Object} obj BAAS.Supervise实例
         * @returns {BAAS._Promise} Promise对象
         * @static
         */
        Supervise_update: function (supervise,opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: "salesOrder/supervise/edit/"+opt.objId,
                method: "POST",

                data: supervise
            })
        },
        /**
         * 删除订单督办
         * @method BAAS.Supervise_delete
         * @param {Object} obj BAAS.Supervise实例
         * @returns {BAAS._Promise} Promise对象
         * @static
         */
        Supervise_delete: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: "salesOrder/supervise/delete",
                method: "POST",

                data: {
                    superviseId:opt._id
                }
            })
        },
        /**
         * 搜索工单
         * @method BAAS.Supervise_search
         * @param {Object} obj BAAS.Supervise实例
         * @returns {BAAS._Promise} Promise对象
         * @static
         */
        Supervise_search: function (opt) {
            var _this = this;
            opt = opt || {};
            return _this._request({
                uri: "salesOrder/supervise/search",
                method: "POST",

                data: opt.data
            })
        }
    });
})(window);